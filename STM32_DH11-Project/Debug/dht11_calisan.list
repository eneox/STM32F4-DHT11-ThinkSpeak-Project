
dht11_calisan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008758  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b00  08008b00  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b00  08008b00  00018b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b08  08008b08  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b0c  08008b0c  00018b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  200001e4  08008cf4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c54  08008cf4  00021c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c441  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003edb  00000000  00000000  0003c655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00040530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  000418c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027179  00000000  00000000  00042aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f9b  00000000  00000000  00069c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf93  00000000  00000000  00080bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015db4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005558  00000000  00000000  0015dba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080088f0 	.word	0x080088f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	080088f0 	.word	0x080088f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff fe25 	bl	80001f0 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e007      	b.n	80005c0 <bufclr+0x28>
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf3      	blt.n	80005b0 <bufclr+0x18>
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b096      	sub	sp, #88	; 0x58
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005de:	f000 f91f 	bl	8000820 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005e2:	4823      	ldr	r0, [pc, #140]	; (8000670 <ESP_Init+0x9c>)
 80005e4:	f000 f9e8 	bl	80009b8 <Uart_sendstring>
	HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f001 f804 	bl	80015f8 <HAL_Delay>

	Uart_flush();
 80005f0:	f000 f95e 	bl	80008b0 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 80005f4:	481f      	ldr	r0, [pc, #124]	; (8000674 <ESP_Init+0xa0>)
 80005f6:	f000 f9df 	bl	80009b8 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 80005fa:	bf00      	nop
 80005fc:	481e      	ldr	r0, [pc, #120]	; (8000678 <ESP_Init+0xa4>)
 80005fe:	f000 fa0b 	bl	8000a18 <Wait_for>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f9      	beq.n	80005fc <ESP_Init+0x28>

	Uart_flush();
 8000608:	f000 f952 	bl	80008b0 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 800060c:	481b      	ldr	r0, [pc, #108]	; (800067c <ESP_Init+0xa8>)
 800060e:	f000 f9d3 	bl	80009b8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000612:	bf00      	nop
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <ESP_Init+0xa4>)
 8000616:	f000 f9ff 	bl	8000a18 <Wait_for>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f9      	beq.n	8000614 <ESP_Init+0x40>

	Uart_flush();
 8000620:	f000 f946 	bl	80008b0 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000624:	f107 0008 	add.w	r0, r7, #8
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	4914      	ldr	r1, [pc, #80]	; (8000680 <ESP_Init+0xac>)
 800062e:	f007 fddb 	bl	80081e8 <siprintf>
	Uart_sendstring(data);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f9be 	bl	80009b8 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 800063c:	bf00      	nop
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <ESP_Init+0xb0>)
 8000640:	f000 f9ea 	bl	8000a18 <Wait_for>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f9      	beq.n	800063e <ESP_Init+0x6a>

	Uart_flush();
 800064a:	f000 f931 	bl	80008b0 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <ESP_Init+0xb4>)
 8000650:	f000 f9b2 	bl	80009b8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000654:	bf00      	nop
 8000656:	4808      	ldr	r0, [pc, #32]	; (8000678 <ESP_Init+0xa4>)
 8000658:	f000 f9de 	bl	8000a18 <Wait_for>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f9      	beq.n	8000656 <ESP_Init+0x82>

	Uart_flush();
 8000662:	f000 f925 	bl	80008b0 <Uart_flush>

}
 8000666:	bf00      	nop
 8000668:	3758      	adds	r7, #88	; 0x58
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	08008908 	.word	0x08008908
 8000674:	08008914 	.word	0x08008914
 8000678:	0800891c 	.word	0x0800891c
 800067c:	08008924 	.word	0x08008924
 8000680:	08008934 	.word	0x08008934
 8000684:	0800894c 	.word	0x0800894c
 8000688:	08008958 	.word	0x08008958

0800068c <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 800068c:	b580      	push	{r7, lr}
 800068e:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000692:	af00      	add	r7, sp, #0
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	6018      	str	r0, [r3, #0]
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	6019      	str	r1, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 80006a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	3304      	adds	r3, #4
 80006ae:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f007 fcd5 	bl	8008064 <memset>
	char local_buf2[30] = {0};
 80006ba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	3304      	adds	r3, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	3304      	adds	r3, #4
 80006de:	22c4      	movs	r2, #196	; 0xc4
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 fcbe 	bl	8008064 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 80006e8:	4844      	ldr	r0, [pc, #272]	; (80007fc <ESP_Send_Multi+0x170>)
 80006ea:	f000 f965 	bl	80009b8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006ee:	bf00      	nop
 80006f0:	4843      	ldr	r0, [pc, #268]	; (8000800 <ESP_Send_Multi+0x174>)
 80006f2:	f000 f991 	bl	8000a18 <Wait_for>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f9      	beq.n	80006f0 <ESP_Send_Multi+0x64>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	493f      	ldr	r1, [pc, #252]	; (8000804 <ESP_Send_Multi+0x178>)
 8000708:	f007 fd6e 	bl	80081e8 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000712:	e01c      	b.n	800074e <ESP_Send_Multi+0xc2>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 8000714:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000718:	1c59      	adds	r1, r3, #1
 800071a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	1d3a      	adds	r2, r7, #4
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	4413      	add	r3, r2
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	f107 0014 	add.w	r0, r7, #20
 800072c:	460a      	mov	r2, r1
 800072e:	4936      	ldr	r1, [pc, #216]	; (8000808 <ESP_Send_Multi+0x17c>)
 8000730:	f007 fd5a 	bl	80081e8 <siprintf>
		strcat (local_buf, field_buf);
 8000734:	f107 0214 	add.w	r2, r7, #20
 8000738:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fd72 	bl	8008228 <strcat>
	for (int i=0; i<numberoffileds; i++)
 8000744:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000748:	3301      	adds	r3, #1
 800074a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbdb      	blt.n	8000714 <ESP_Send_Multi+0x88>
	}

	strcat(local_buf, "\r\n");
 800075c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd45 	bl	80001f0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800076e:	4413      	add	r3, r2
 8000770:	4a26      	ldr	r2, [pc, #152]	; (800080c <ESP_Send_Multi+0x180>)
 8000772:	8811      	ldrh	r1, [r2, #0]
 8000774:	7892      	ldrb	r2, [r2, #2]
 8000776:	8019      	strh	r1, [r3, #0]
 8000778:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 800077a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd36 	bl	80001f0 <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 800078a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800078e:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 8000792:	491f      	ldr	r1, [pc, #124]	; (8000810 <ESP_Send_Multi+0x184>)
 8000794:	4618      	mov	r0, r3
 8000796:	f007 fd27 	bl	80081e8 <siprintf>
	Uart_sendstring(local_buf2);
 800079a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f90a 	bl	80009b8 <Uart_sendstring>
	while (!(Wait_for(">")));
 80007a4:	bf00      	nop
 80007a6:	481b      	ldr	r0, [pc, #108]	; (8000814 <ESP_Send_Multi+0x188>)
 80007a8:	f000 f936 	bl	8000a18 <Wait_for>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0f9      	beq.n	80007a6 <ESP_Send_Multi+0x11a>

	Uart_sendstring (local_buf);
 80007b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f8fe 	bl	80009b8 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 80007bc:	bf00      	nop
 80007be:	4816      	ldr	r0, [pc, #88]	; (8000818 <ESP_Send_Multi+0x18c>)
 80007c0:	f000 f92a 	bl	8000a18 <Wait_for>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d0f9      	beq.n	80007be <ESP_Send_Multi+0x132>

	while (!(Wait_for("CLOSED")));
 80007ca:	bf00      	nop
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <ESP_Send_Multi+0x190>)
 80007ce:	f000 f923 	bl	8000a18 <Wait_for>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f9      	beq.n	80007cc <ESP_Send_Multi+0x140>

	bufclr(local_buf);
 80007d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fedb 	bl	8000598 <bufclr>
	bufclr(local_buf2);
 80007e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fed6 	bl	8000598 <bufclr>

	Ringbuf_init();
 80007ec:	f000 f818 	bl	8000820 <Ringbuf_init>

}
 80007f0:	bf00      	nop
 80007f2:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08008968 	.word	0x08008968
 8000800:	0800891c 	.word	0x0800891c
 8000804:	080089e0 	.word	0x080089e0
 8000808:	080089f8 	.word	0x080089f8
 800080c:	08008a04 	.word	0x08008a04
 8000810:	080089b8 	.word	0x080089b8
 8000814:	080089c8 	.word	0x080089c8
 8000818:	080089cc 	.word	0x080089cc
 800081c:	080089d8 	.word	0x080089d8

08000820 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000824:	4b0d      	ldr	r3, [pc, #52]	; (800085c <Ringbuf_init+0x3c>)
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <Ringbuf_init+0x40>)
 8000828:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <Ringbuf_init+0x44>)
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <Ringbuf_init+0x48>)
 800082e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <Ringbuf_init+0x4c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	695a      	ldr	r2, [r3, #20]
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <Ringbuf_init+0x4c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f042 0201 	orr.w	r2, r2, #1
 800083e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <Ringbuf_init+0x4c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68da      	ldr	r2, [r3, #12]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <Ringbuf_init+0x4c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f042 0220 	orr.w	r2, r2, #32
 800084e:	60da      	str	r2, [r3, #12]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	200002b4 	.word	0x200002b4
 8000860:	20000200 	.word	0x20000200
 8000864:	200002b0 	.word	0x200002b0
 8000868:	20000248 	.word	0x20000248
 800086c:	200002b8 	.word	0x200002b8

08000870 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	3301      	adds	r3, #1
 8000882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000886:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	429a      	cmp	r2, r3
 8000890:	d007      	beq.n	80008a2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	79f9      	ldrb	r1, [r7, #7]
 800089a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
	...

080008b0 <Uart_flush>:

void Uart_flush (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <Uart_flush+0x1c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <Uart_flush+0x1c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	200002b4 	.word	0x200002b4

080008d0 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <Uart_read+0x4c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <Uart_read+0x4c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d102      	bne.n	80008ec <Uart_read+0x1c>
  {
    return -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e010      	b.n	800090e <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <Uart_read+0x4c>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <Uart_read+0x4c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	5cd3      	ldrb	r3, [r2, r3]
 80008f8:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <Uart_read+0x4c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <Uart_read+0x4c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800090a:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 800090c:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200002b4 	.word	0x200002b4

08000920 <Uart_write>:

void Uart_write(int c)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db21      	blt.n	8000972 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <Uart_write+0x60>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	3301      	adds	r3, #1
 8000936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800093a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800093c:	bf00      	nop
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <Uart_write+0x60>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	429a      	cmp	r2, r3
 8000948:	d0f9      	beq.n	800093e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <Uart_write+0x60>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <Uart_write+0x60>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	b2c9      	uxtb	r1, r1
 8000958:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <Uart_write+0x60>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <Uart_write+0x64>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68da      	ldr	r2, [r3, #12]
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <Uart_write+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000970:	60da      	str	r2, [r3, #12]
	}
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200002b0 	.word	0x200002b0
 8000984:	200002b8 	.word	0x200002b8

08000988 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <IsDataAvailable+0x2c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	b29a      	uxth	r2, r3
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <IsDataAvailable+0x2c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	b29b      	uxth	r3, r3
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3340      	adds	r3, #64	; 0x40
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200002b4 	.word	0x200002b4

080009b8 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80009c0:	e006      	b.n	80009d0 <Uart_sendstring+0x18>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffa8 	bl	8000920 <Uart_write>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f4      	bne.n	80009c2 <Uart_sendstring+0xa>
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <Uart_peek+0x30>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <Uart_peek+0x30>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d102      	bne.n	80009fe <Uart_peek+0x1a>
  {
    return -1;
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	e005      	b.n	8000a0a <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <Uart_peek+0x30>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <Uart_peek+0x30>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a08:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	200002b4 	.word	0x200002b4

08000a18 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fbe3 	bl	80001f0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffaa 	bl	8000988 <IsDataAvailable>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0fa      	beq.n	8000a30 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8000a3a:	f7ff ffd3 	bl	80009e4 <Uart_peek>
 8000a3e:	4601      	mov	r1, r0
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d01a      	beq.n	8000a82 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <Wait_for+0xa4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <Wait_for+0xa4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a5c:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8000a5e:	e7e6      	b.n	8000a2e <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000a66:	f7ff ff33 	bl	80008d0 <Uart_read>
		if (so_far == len) return 1;
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d101      	bne.n	8000a76 <Wait_for+0x5e>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e01d      	b.n	8000ab2 <Wait_for+0x9a>
		while (!IsDataAvailable());
 8000a76:	bf00      	nop
 8000a78:	f7ff ff86 	bl	8000988 <IsDataAvailable>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0fa      	beq.n	8000a78 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000a82:	f7ff ffaf 	bl	80009e4 <Uart_peek>
 8000a86:	4601      	mov	r1, r0
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4299      	cmp	r1, r3
 8000a92:	d0e5      	beq.n	8000a60 <Wait_for+0x48>
	}

	if (so_far != len)
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d002      	beq.n	8000aa2 <Wait_for+0x8a>
	{
		so_far = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
		goto again;
 8000aa0:	e7c5      	b.n	8000a2e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d101      	bne.n	8000aae <Wait_for+0x96>
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e001      	b.n	8000ab2 <Wait_for+0x9a>
	else return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200002b4 	.word	0x200002b4

08000ac0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d013      	beq.n	8000b0a <Uart_isr+0x4a>
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	f003 0320 	and.w	r3, r3, #32
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00e      	beq.n	8000b0a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <Uart_isr+0xac>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff feb4 	bl	8000870 <store_char>
        return;
 8000b08:	e02c      	b.n	8000b64 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d027      	beq.n	8000b64 <Uart_isr+0xa4>
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d022      	beq.n	8000b64 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <Uart_isr+0xb0>)
 8000b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <Uart_isr+0xb0>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d108      	bne.n	8000b3c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b38:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000b3a:	e012      	b.n	8000b62 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <Uart_isr+0xb0>)
 8000b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b40:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <Uart_isr+0xb0>)
 8000b42:	5cd3      	ldrb	r3, [r2, r3]
 8000b44:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <Uart_isr+0xb0>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b50:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <Uart_isr+0xb0>)
 8000b52:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	7bba      	ldrb	r2, [r7, #14]
 8000b60:	605a      	str	r2, [r3, #4]
    	return;
 8000b62:	bf00      	nop
    }
}
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200002b4 	.word	0x200002b4
 8000b70:	20000248 	.word	0x20000248

08000b74 <delay>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM6_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
void delay(uint16_t time){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <delay+0x30>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim6)< time);
 8000b86:	bf00      	nop
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <delay+0x30>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d3f9      	bcc.n	8000b88 <delay+0x14>

}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000328 	.word	0x20000328

08000ba8 <Set_Pin_Output>:


void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]


	GPIO_InitTypeDef DHT11_DATA={0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin=GPIO_Pin;
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Mode=GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 fe64 	bl	80018a8 <HAL_GPIO_Init>

}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	807b      	strh	r3, [r7, #2]


	GPIO_InitTypeDef DHT11_DATA={0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin=GPIO_Pin;
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Mode=GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 fe44 	bl	80018a8 <HAL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <DHT11_Read>:
uint8_t mData[40];
uint16_t mTime1 = 0, mTime2 = 0;
uint16_t mbit = 0;
uint8_t  parityVal = 0, genParity = 0;

uint8_t DHT11_Read (void){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0

  for(int a=0;a<40;a++) mData[a]=0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e007      	b.n	8000c44 <DHT11_Read+0x1c>
 8000c34:	4a8f      	ldr	r2, [pc, #572]	; (8000e74 <DHT11_Read+0x24c>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	4413      	add	r3, r2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	2b27      	cmp	r3, #39	; 0x27
 8000c48:	ddf4      	ble.n	8000c34 <DHT11_Read+0xc>
   mTime1 = 0, mTime2 = 0, durum=0, tempVal=0, humVal=0, parityVal = 0, genParity = 0,  mbit = 0;
 8000c4a:	4b8b      	ldr	r3, [pc, #556]	; (8000e78 <DHT11_Read+0x250>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
 8000c50:	4b8a      	ldr	r3, [pc, #552]	; (8000e7c <DHT11_Read+0x254>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	801a      	strh	r2, [r3, #0]
 8000c56:	4b8a      	ldr	r3, [pc, #552]	; (8000e80 <DHT11_Read+0x258>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	4b89      	ldr	r3, [pc, #548]	; (8000e84 <DHT11_Read+0x25c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
 8000c62:	4b89      	ldr	r3, [pc, #548]	; (8000e88 <DHT11_Read+0x260>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	801a      	strh	r2, [r3, #0]
 8000c68:	4b88      	ldr	r3, [pc, #544]	; (8000e8c <DHT11_Read+0x264>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <DHT11_Read+0x268>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	4b87      	ldr	r3, [pc, #540]	; (8000e94 <DHT11_Read+0x26c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	801a      	strh	r2, [r3, #0]

     Set_Pin_Output(DHT11_PORT,DHT11_PIN);
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	4886      	ldr	r0, [pc, #536]	; (8000e98 <DHT11_Read+0x270>)
 8000c7e:	f7ff ff93 	bl	8000ba8 <Set_Pin_Output>
	 HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2108      	movs	r1, #8
 8000c86:	4884      	ldr	r0, [pc, #528]	; (8000e98 <DHT11_Read+0x270>)
 8000c88:	f000 ffd2 	bl	8001c30 <HAL_GPIO_WritePin>
    delay(18000);
 8000c8c:	f244 6050 	movw	r0, #18000	; 0x4650
 8000c90:	f7ff ff70 	bl	8000b74 <delay>
   	Set_Pin_Input(DHT11_PORT,DHT11_PIN);
 8000c94:	2108      	movs	r1, #8
 8000c96:	4880      	ldr	r0, [pc, #512]	; (8000e98 <DHT11_Read+0x270>)
 8000c98:	f7ff ffa6 	bl	8000be8 <Set_Pin_Input>

	 __HAL_TIM_SET_COUNTER(&htim6, 0);				//set timer counter to zero
 8000c9c:	4b7f      	ldr	r3, [pc, #508]	; (8000e9c <DHT11_Read+0x274>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000ca4:	e008      	b.n	8000cb8 <DHT11_Read+0x90>
 8000ca6:	4b7d      	ldr	r3, [pc, #500]	; (8000e9c <DHT11_Read+0x274>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cb2:	d901      	bls.n	8000cb8 <DHT11_Read+0x90>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e130      	b.n	8000f1a <DHT11_Read+0x2f2>
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4877      	ldr	r0, [pc, #476]	; (8000e98 <DHT11_Read+0x270>)
 8000cbc:	f000 ffa0 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d0ef      	beq.n	8000ca6 <DHT11_Read+0x7e>

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000cc6:	4b75      	ldr	r3, [pc, #468]	; (8000e9c <DHT11_Read+0x274>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000cce:	e008      	b.n	8000ce2 <DHT11_Read+0xba>
 8000cd0:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <DHT11_Read+0x274>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cdc:	d901      	bls.n	8000ce2 <DHT11_Read+0xba>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e11b      	b.n	8000f1a <DHT11_Read+0x2f2>
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	486c      	ldr	r0, [pc, #432]	; (8000e98 <DHT11_Read+0x270>)
 8000ce6:	f000 ff8b 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0ef      	beq.n	8000cd0 <DHT11_Read+0xa8>
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8000cf0:	4b6a      	ldr	r3, [pc, #424]	; (8000e9c <DHT11_Read+0x274>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <DHT11_Read+0x250>)
 8000cfa:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000cfc:	4b67      	ldr	r3, [pc, #412]	; (8000e9c <DHT11_Read+0x274>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000d04:	e008      	b.n	8000d18 <DHT11_Read+0xf0>
 8000d06:	4b65      	ldr	r3, [pc, #404]	; (8000e9c <DHT11_Read+0x274>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d12:	d901      	bls.n	8000d18 <DHT11_Read+0xf0>
 8000d14:	2300      	movs	r3, #0
 8000d16:	e100      	b.n	8000f1a <DHT11_Read+0x2f2>
 8000d18:	2108      	movs	r1, #8
 8000d1a:	485f      	ldr	r0, [pc, #380]	; (8000e98 <DHT11_Read+0x270>)
 8000d1c:	f000 ff70 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d0ef      	beq.n	8000d06 <DHT11_Read+0xde>
    mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8000d26:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <DHT11_Read+0x274>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <DHT11_Read+0x254>)
 8000d30:	801a      	strh	r2, [r3, #0]


	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8000d32:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <DHT11_Read+0x250>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	2b4a      	cmp	r3, #74	; 0x4a
 8000d38:	d80d      	bhi.n	8000d56 <DHT11_Read+0x12e>
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	; (8000e78 <DHT11_Read+0x250>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	2b55      	cmp	r3, #85	; 0x55
 8000d40:	d909      	bls.n	8000d56 <DHT11_Read+0x12e>
 8000d42:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <DHT11_Read+0x254>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	2b4a      	cmp	r3, #74	; 0x4a
 8000d48:	d805      	bhi.n	8000d56 <DHT11_Read+0x12e>
 8000d4a:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <DHT11_Read+0x254>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	2b55      	cmp	r3, #85	; 0x55
 8000d50:	d901      	bls.n	8000d56 <DHT11_Read+0x12e>
	{

		return 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e0e1      	b.n	8000f1a <DHT11_Read+0x2f2>
	}




	for(int j = 0; j < 40; j++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	e051      	b.n	8000e00 <DHT11_Read+0x1d8>
	{
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d5c:	4b4f      	ldr	r3, [pc, #316]	; (8000e9c <DHT11_Read+0x274>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000d64:	e008      	b.n	8000d78 <DHT11_Read+0x150>
 8000d66:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <DHT11_Read+0x274>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d72:	d901      	bls.n	8000d78 <DHT11_Read+0x150>
 8000d74:	2300      	movs	r3, #0
 8000d76:	e0d0      	b.n	8000f1a <DHT11_Read+0x2f2>
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4847      	ldr	r0, [pc, #284]	; (8000e98 <DHT11_Read+0x270>)
 8000d7c:	f000 ff40 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0ef      	beq.n	8000d66 <DHT11_Read+0x13e>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d86:	4b45      	ldr	r3, [pc, #276]	; (8000e9c <DHT11_Read+0x274>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000d8e:	e008      	b.n	8000da2 <DHT11_Read+0x17a>
 8000d90:	4b42      	ldr	r3, [pc, #264]	; (8000e9c <DHT11_Read+0x274>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d9c:	d901      	bls.n	8000da2 <DHT11_Read+0x17a>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e0bb      	b.n	8000f1a <DHT11_Read+0x2f2>
 8000da2:	2108      	movs	r1, #8
 8000da4:	483c      	ldr	r0, [pc, #240]	; (8000e98 <DHT11_Read+0x270>)
 8000da6:	f000 ff2b 	bl	8001c00 <HAL_GPIO_ReadPin>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d0ef      	beq.n	8000d90 <DHT11_Read+0x168>
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8000db0:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <DHT11_Read+0x274>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <DHT11_Read+0x250>)
 8000dba:	801a      	strh	r2, [r3, #0]

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <DHT11_Read+0x250>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	2b14      	cmp	r3, #20
 8000dc2:	d907      	bls.n	8000dd4 <DHT11_Read+0x1ac>
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <DHT11_Read+0x250>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	2b1d      	cmp	r3, #29
 8000dca:	d803      	bhi.n	8000dd4 <DHT11_Read+0x1ac>
		{
			mbit = 0;
 8000dcc:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <DHT11_Read+0x26c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	801a      	strh	r2, [r3, #0]
 8000dd2:	e00a      	b.n	8000dea <DHT11_Read+0x1c2>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <DHT11_Read+0x250>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	2b3c      	cmp	r3, #60	; 0x3c
 8000dda:	d906      	bls.n	8000dea <DHT11_Read+0x1c2>
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <DHT11_Read+0x250>)
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	2b4f      	cmp	r3, #79	; 0x4f
 8000de2:	d802      	bhi.n	8000dea <DHT11_Read+0x1c2>
		{
			 mbit = 1;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <DHT11_Read+0x26c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	801a      	strh	r2, [r3, #0]
		}

		//set i th data in data buffer
		mData[j] = mbit;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <DHT11_Read+0x26c>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b2d9      	uxtb	r1, r3
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <DHT11_Read+0x24c>)
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4413      	add	r3, r2
 8000df6:	460a      	mov	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	2b27      	cmp	r3, #39	; 0x27
 8000e04:	ddaa      	ble.n	8000d5c <DHT11_Read+0x134>

	}

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	e013      	b.n	8000e34 <DHT11_Read+0x20c>
	{
		humVal += mData[i];
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <DHT11_Read+0x24c>)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <DHT11_Read+0x260>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <DHT11_Read+0x260>)
 8000e20:	801a      	strh	r2, [r3, #0]
		humVal = humVal << 1;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <DHT11_Read+0x260>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <DHT11_Read+0x260>)
 8000e2c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	dde8      	ble.n	8000e0c <DHT11_Read+0x1e4>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	e013      	b.n	8000e68 <DHT11_Read+0x240>
	{
		tempVal += mData[i];
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <DHT11_Read+0x24c>)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4413      	add	r3, r2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <DHT11_Read+0x25c>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <DHT11_Read+0x25c>)
 8000e54:	801a      	strh	r2, [r3, #0]
		tempVal = tempVal << 1;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <DHT11_Read+0x25c>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <DHT11_Read+0x25c>)
 8000e60:	801a      	strh	r2, [r3, #0]
	for(int i = 16; i < 24; i++)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3301      	adds	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b17      	cmp	r3, #23
 8000e6c:	dde8      	ble.n	8000e40 <DHT11_Read+0x218>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8000e6e:	2320      	movs	r3, #32
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	e028      	b.n	8000ec6 <DHT11_Read+0x29e>
 8000e74:	200002fc 	.word	0x200002fc
 8000e78:	20000298 	.word	0x20000298
 8000e7c:	2000029a 	.word	0x2000029a
 8000e80:	20000290 	.word	0x20000290
 8000e84:	20000294 	.word	0x20000294
 8000e88:	20000296 	.word	0x20000296
 8000e8c:	2000029e 	.word	0x2000029e
 8000e90:	2000029f 	.word	0x2000029f
 8000e94:	2000029c 	.word	0x2000029c
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	20000328 	.word	0x20000328
	{
		parityVal += mData[i];
 8000ea0:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <DHT11_Read+0x2fc>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <DHT11_Read+0x300>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <DHT11_Read+0x300>)
 8000eb2:	701a      	strb	r2, [r3, #0]
		parityVal = parityVal << 1;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <DHT11_Read+0x300>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <DHT11_Read+0x300>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	for(int i = 32; i < 40; i++)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b27      	cmp	r3, #39	; 0x27
 8000eca:	dde9      	ble.n	8000ea0 <DHT11_Read+0x278>
	}

	parityVal = parityVal >> 1;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <DHT11_Read+0x300>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	085b      	lsrs	r3, r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <DHT11_Read+0x300>)
 8000ed6:	701a      	strb	r2, [r3, #0]
	humVal = humVal >> 1;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <DHT11_Read+0x304>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	085b      	lsrs	r3, r3, #1
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <DHT11_Read+0x304>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	tempVal = tempVal >> 1;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <DHT11_Read+0x308>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	085b      	lsrs	r3, r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <DHT11_Read+0x308>)
 8000eee:	801a      	strh	r2, [r3, #0]

	genParity = humVal + tempVal;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <DHT11_Read+0x304>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <DHT11_Read+0x308>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <DHT11_Read+0x30c>)
 8000f02:	701a      	strb	r2, [r3, #0]


	dhtVal[0]= tempVal;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <DHT11_Read+0x308>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <DHT11_Read+0x310>)
 8000f0c:	701a      	strb	r2, [r3, #0]
	dhtVal[1] = humVal;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <DHT11_Read+0x304>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <DHT11_Read+0x310>)
 8000f16:	705a      	strb	r2, [r3, #1]

	return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200002fc 	.word	0x200002fc
 8000f28:	2000029e 	.word	0x2000029e
 8000f2c:	20000296 	.word	0x20000296
 8000f30:	20000294 	.word	0x20000294
 8000f34:	2000029f 	.word	0x2000029f
 8000f38:	200002f8 	.word	0x200002f8

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09a      	sub	sp, #104	; 0x68
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 fae7 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f875 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 f93d 	bl	80011c8 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000f4e:	f000 f8db 	bl	8001108 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8000f52:	f000 f90f 	bl	8001174 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8000f56:	f006 fb49 	bl	80075ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000f5a:	482a      	ldr	r0, [pc, #168]	; (8001004 <main+0xc8>)
 8000f5c:	f002 fc9b 	bl	8003896 <HAL_TIM_Base_Start>
  ESP_Init("TTNET_AirTies_Air5650_8EG6","060956caak.");
 8000f60:	4929      	ldr	r1, [pc, #164]	; (8001008 <main+0xcc>)
 8000f62:	482a      	ldr	r0, [pc, #168]	; (800100c <main+0xd0>)
 8000f64:	f7ff fb36 	bl	80005d4 <ESP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  durum=DHT11_Read();
 8000f68:	f7ff fe5e 	bl	8000c28 <DHT11_Read>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <main+0xd4>)
 8000f72:	701a      	strb	r2, [r3, #0]
		  	      if (durum ==1)	{Temperature=tempVal; Humidity=humVal;}
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <main+0xd4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d109      	bne.n	8000f90 <main+0x54>
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <main+0xd8>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <main+0xdc>)
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <main+0xe0>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <main+0xe4>)
 8000f8e:	701a      	strb	r2, [r3, #0]
		  	      HAL_Delay(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f94:	f000 fb30 	bl	80015f8 <HAL_Delay>
		  	     dht_Val[0]=tempVal;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <main+0xd8>)
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <main+0xe8>)
 8000f9e:	801a      	strh	r2, [r3, #0]
		  	   dht_Val[1]=humVal;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <main+0xe0>)
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <main+0xe8>)
 8000fa6:	805a      	strh	r2, [r3, #2]


		  	      ESP_Send_Multi("BEOXAEQ0EAYGUXQ9",2,dht_Val);
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <main+0xe8>)
 8000faa:	2102      	movs	r1, #2
 8000fac:	481e      	ldr	r0, [pc, #120]	; (8001028 <main+0xec>)
 8000fae:	f7ff fb6d 	bl	800068c <ESP_Send_Multi>
		  	     HAL_Delay (15000);
 8000fb2:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000fb6:	f000 fb1f 	bl	80015f8 <HAL_Delay>

		  	   char usbdenGonderilecekData[50];
		  	  char usbdenGonderilecekData_2[50];
		  	  	  sprintf(usbdenGonderilecekData, "Isi degeri: %d C \n",Temperature);
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <main+0xdc>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	491a      	ldr	r1, [pc, #104]	; (800102c <main+0xf0>)
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f007 f90f 	bl	80081e8 <siprintf>
		  	  	 sprintf(usbdenGonderilecekData_2, "Nem degeri: %d g/m3 \n",Humidity);
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <main+0xe4>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fd4:	4916      	ldr	r1, [pc, #88]	; (8001030 <main+0xf4>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 f906 	bl	80081e8 <siprintf>

		  	  	 // uint8_t buf[5] = "Hello";
		  	  	  CDC_Transmit_FS(usbdenGonderilecekData, 25);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2119      	movs	r1, #25
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f006 fbc1 	bl	8007768 <CDC_Transmit_FS>
		  	  	  HAL_Delay(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f000 fb06 	bl	80015f8 <HAL_Delay>
		  	  	 CDC_Transmit_FS(usbdenGonderilecekData_2, 25);
 8000fec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ff0:	2119      	movs	r1, #25
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f006 fbb8 	bl	8007768 <CDC_Transmit_FS>
HAL_Delay(1000);
 8000ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffc:	f000 fafc 	bl	80015f8 <HAL_Delay>
  {
 8001000:	e7b2      	b.n	8000f68 <main+0x2c>
 8001002:	bf00      	nop
 8001004:	20000328 	.word	0x20000328
 8001008:	08008a08 	.word	0x08008a08
 800100c:	08008a14 	.word	0x08008a14
 8001010:	20000290 	.word	0x20000290
 8001014:	20000294 	.word	0x20000294
 8001018:	20000292 	.word	0x20000292
 800101c:	20000296 	.word	0x20000296
 8001020:	20000291 	.word	0x20000291
 8001024:	20000324 	.word	0x20000324
 8001028:	08008a30 	.word	0x08008a30
 800102c:	08008a44 	.word	0x08008a44
 8001030:	08008a58 	.word	0x08008a58

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f007 f80e 	bl	8008064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a27      	ldr	r2, [pc, #156]	; (8001100 <SystemClock_Config+0xcc>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <SystemClock_Config+0xd0>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001098:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010ac:	2348      	movs	r3, #72	; 0x48
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010b4:	2303      	movs	r3, #3
 80010b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 ff53 	bl	8002f68 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c8:	f000 f8ce 	bl	8001268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2102      	movs	r1, #2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 f9ad 	bl	8003448 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f4:	f000 f8b8 	bl	8001268 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	; 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_TIM6_Init+0x64>)
 8001118:	4a15      	ldr	r2, [pc, #84]	; (8001170 <MX_TIM6_Init+0x68>)
 800111a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_TIM6_Init+0x64>)
 800111e:	2253      	movs	r2, #83	; 0x53
 8001120:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_TIM6_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_TIM6_Init+0x64>)
 800112a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800112e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_TIM6_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_TIM6_Init+0x64>)
 8001138:	f002 fb82 	bl	8003840 <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001142:	f000 f891 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_TIM6_Init+0x64>)
 8001154:	f002 fc64 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800115e:	f000 f883 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000328 	.word	0x20000328
 8001170:	40001000 	.word	0x40001000

08001174 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <MX_USART6_UART_Init+0x50>)
 800117c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_USART6_UART_Init+0x4c>)
 80011ac:	f002 fcb4 	bl	8003b18 <HAL_UART_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011b6:	f000 f857 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002b8 	.word	0x200002b8
 80011c4:	40011400 	.word	0x40011400

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_GPIO_Init+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <MX_GPIO_Init+0x98>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_GPIO_Init+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_GPIO_Init+0x98>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <MX_GPIO_Init+0x98>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_GPIO_Init+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_GPIO_Init+0x98>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <MX_GPIO_Init+0x98>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_GPIO_Init+0x98>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2108      	movs	r1, #8
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <MX_GPIO_Init+0x9c>)
 8001238:	f000 fcfa 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800123c:	2308      	movs	r3, #8
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_GPIO_Init+0x9c>)
 8001254:	f000 fb28 	bl	80018a8 <HAL_GPIO_Init>

}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_MspInit+0x4c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_TIM_Base_MspInit+0x3c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10d      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_TIM_Base_MspInit+0x40>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_TIM_Base_MspInit+0x40>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_TIM_Base_MspInit+0x40>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40001000 	.word	0x40001000
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1d      	ldr	r2, [pc, #116]	; (800139c <HAL_UART_MspInit+0x94>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d133      	bne.n	8001392 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0x98>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x98>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_UART_MspInit+0x98>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001362:	23c0      	movs	r3, #192	; 0xc0
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001372:	2308      	movs	r3, #8
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_UART_MspInit+0x9c>)
 800137e:	f000 fa93 	bl	80018a8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2047      	movs	r0, #71	; 0x47
 8001388:	f000 fa35 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800138c:	2047      	movs	r0, #71	; 0x47
 800138e:	f000 fa4e 	bl	800182e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40011400 	.word	0x40011400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020800 	.word	0x40020800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f8e0 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <OTG_FS_IRQHandler+0x10>)
 8001402:	f000 fd7e 	bl	8001f02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000183c 	.word	0x2000183c

08001410 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
Uart_isr(&huart6);
 8001414:	4803      	ldr	r0, [pc, #12]	; (8001424 <USART6_IRQHandler+0x14>)
 8001416:	f7ff fb53 	bl	8000ac0 <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <USART6_IRQHandler+0x14>)
 800141c:	f002 fbca 	bl	8003bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200002b8 	.word	0x200002b8

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f006 fdca 	bl	8007ff0 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20030000 	.word	0x20030000
 8001488:	00000400 	.word	0x00000400
 800148c:	200002a0 	.word	0x200002a0
 8001490:	20001c58 	.word	0x20001c58

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <SystemInit+0x28>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <SystemInit+0x28>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <SystemInit+0x28>)
 80014aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ae:	609a      	str	r2, [r3, #8]
#endif
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014c6:	e003      	b.n	80014d0 <LoopCopyDataInit>

080014c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ce:	3104      	adds	r1, #4

080014d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014d8:	d3f6      	bcc.n	80014c8 <CopyDataInit>
  ldr  r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014dc:	e002      	b.n	80014e4 <LoopFillZerobss>

080014de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014e0:	f842 3b04 	str.w	r3, [r2], #4

080014e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014e8:	d3f9      	bcc.n	80014de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ea:	f7ff ffd3 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f006 fd85 	bl	8007ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff fd23 	bl	8000f3c <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80014fc:	08008b10 	.word	0x08008b10
  ldr  r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001504:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001508:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800150c:	20001c54 	.word	0x20001c54

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <HAL_Init+0x40>)
 800151e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_Init+0x40>)
 800152a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x40>)
 8001536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f94f 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fe94 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023c00 	.word	0x40023c00

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f967 	bl	800184a <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 f92f 	bl	80017f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x20>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x24>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_IncTick+0x24>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000368 	.word	0x20000368

080015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_GetTick+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000368 	.word	0x20000368

080015f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff ffee 	bl	80015e0 <HAL_GetTick>
 8001604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d005      	beq.n	800161e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_Delay+0x44>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800161e:	bf00      	nop
 8001620:	f7ff ffde 	bl	80015e0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8f7      	bhi.n	8001620 <HAL_Delay+0x28>
  {
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4907      	ldr	r1, [pc, #28]	; (80016dc <__NVIC_EnableIRQ+0x38>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff8e 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff29 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff3e 	bl	8001688 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ff8e 	bl	8001734 <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff5d 	bl	80016e0 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff31 	bl	80016a4 <__NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffa2 	bl	800179c <SysTick_Config>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d004      	beq.n	8001880 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e00c      	b.n	800189a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2205      	movs	r2, #5
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	e177      	b.n	8001bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	429a      	cmp	r2, r3
 80018de:	f040 8166 	bne.w	8001bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d00b      	beq.n	8001902 <HAL_GPIO_Init+0x5a>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f6:	2b11      	cmp	r3, #17
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d130      	bne.n	8001964 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0xfc>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b12      	cmp	r3, #18
 80019a2:	d123      	bne.n	80019ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	08da      	lsrs	r2, r3, #3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3208      	adds	r2, #8
 80019e6:	69b9      	ldr	r1, [r7, #24]
 80019e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0203 	and.w	r2, r3, #3
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80c0 	beq.w	8001bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_GPIO_Init+0x324>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4a:	4a61      	ldr	r2, [pc, #388]	; (8001bd0 <HAL_GPIO_Init+0x328>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_GPIO_Init+0x32c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d037      	beq.n	8001ae6 <HAL_GPIO_Init+0x23e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_GPIO_Init+0x330>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d031      	beq.n	8001ae2 <HAL_GPIO_Init+0x23a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a56      	ldr	r2, [pc, #344]	; (8001bdc <HAL_GPIO_Init+0x334>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x236>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a55      	ldr	r2, [pc, #340]	; (8001be0 <HAL_GPIO_Init+0x338>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x232>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <HAL_GPIO_Init+0x33c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x22e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a53      	ldr	r2, [pc, #332]	; (8001be8 <HAL_GPIO_Init+0x340>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x22a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_GPIO_Init+0x344>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x226>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <HAL_GPIO_Init+0x348>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x222>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a50      	ldr	r2, [pc, #320]	; (8001bf4 <HAL_GPIO_Init+0x34c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x21e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_GPIO_Init+0x350>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x21a>
 8001abe:	2309      	movs	r3, #9
 8001ac0:	e012      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	e010      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e00e      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00c      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	; (8001bd0 <HAL_GPIO_Init+0x328>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b06:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2a:	4a34      	ldr	r2, [pc, #208]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b54:	4a29      	ldr	r2, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_GPIO_Init+0x354>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f ae84 	bls.w	80018c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40022400 	.word	0x40022400
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c64:	b08f      	sub	sp, #60	; 0x3c
 8001c66:	af0a      	add	r7, sp, #40	; 0x28
 8001c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e10f      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f005 feb2 	bl	80079f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fe6f 	bl	8004996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	687e      	ldr	r6, [r7, #4]
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 0410 	add.w	r4, r6, #16
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd6:	1d33      	adds	r3, r6, #4
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f002 fd46 	bl	800476c <USB_CoreInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0d0      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fe5d 	bl	80049b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e04a      	b.n	8001d9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	333d      	adds	r3, #61	; 0x3d
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	333c      	adds	r3, #60	; 0x3c
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	b298      	uxth	r0, r3
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3342      	adds	r3, #66	; 0x42
 8001d40:	4602      	mov	r2, r0
 8001d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	333f      	adds	r3, #63	; 0x3f
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3344      	adds	r3, #68	; 0x44
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3348      	adds	r3, #72	; 0x48
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3350      	adds	r3, #80	; 0x50
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3af      	bcc.n	8001d04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e044      	b.n	8001e34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3b5      	bcc.n	8001daa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	687e      	ldr	r6, [r7, #4]
 8001e46:	466d      	mov	r5, sp
 8001e48:	f106 0410 	add.w	r4, r6, #16
 8001e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5c:	1d33      	adds	r3, r6, #4
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f002 fdd3 	bl	8004a0c <USB_DevInit>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e00d      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 fe1b 	bl	8005ac8 <USB_DevDisconnect>

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_Start+0x1c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e020      	b.n	8001efa <HAL_PCD_Start+0x5e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d109      	bne.n	8001edc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d005      	beq.n	8001edc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fd47 	bl	8004974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fdcb 	bl	8005a86 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f02:	b590      	push	{r4, r7, lr}
 8001f04:	b08d      	sub	sp, #52	; 0x34
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fe89 	bl	8005c30 <USB_GetMode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 839d 	bne.w	8002660 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fded 	bl	8005b0a <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8393 	beq.w	800265e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fde4 	bl	8005b0a <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d107      	bne.n	8001f5c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f002 0202 	and.w	r2, r2, #2
 8001f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fdd2 	bl	8005b0a <USB_ReadInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d161      	bne.n	8002034 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0210 	bic.w	r2, r2, #16
 8001f7e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 020f 	and.w	r2, r3, #15
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	0c5b      	lsrs	r3, r3, #17
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d124      	bne.n	8001ff6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d035      	beq.n	8002024 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	6a38      	ldr	r0, [r7, #32]
 8001fcc:	f003 fc38 	bl	8005840 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fdc:	441a      	add	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fee:	441a      	add	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	619a      	str	r2, [r3, #24]
 8001ff4:	e016      	b.n	8002024 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	0c5b      	lsrs	r3, r3, #17
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d110      	bne.n	8002024 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002008:	2208      	movs	r2, #8
 800200a:	4619      	mov	r1, r3
 800200c:	6a38      	ldr	r0, [r7, #32]
 800200e:	f003 fc17 	bl	8005840 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201e:	441a      	add	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0210 	orr.w	r2, r2, #16
 8002032:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f003 fd66 	bl	8005b0a <USB_ReadInterrupts>
 800203e:	4603      	mov	r3, r0
 8002040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002044:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002048:	d16e      	bne.n	8002128 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f003 fd6c 	bl	8005b30 <USB_ReadDevAllOutEpInterrupt>
 8002058:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800205a:	e062      	b.n	8002122 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800205c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d057      	beq.n	8002116 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fd91 	bl	8005b98 <USB_ReadDevOutEPInterrupt>
 8002076:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00c      	beq.n	800209c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	2301      	movs	r3, #1
 8002092:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fdb0 	bl	8002bfc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	2308      	movs	r3, #8
 80020b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 feaa 	bl	8002e14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d6:	461a      	mov	r2, r3
 80020d8:	2310      	movs	r3, #16
 80020da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f2:	461a      	mov	r2, r3
 80020f4:	2320      	movs	r3, #32
 80020f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210e:	461a      	mov	r2, r3
 8002110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002114:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	3301      	adds	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d199      	bne.n	800205c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 fcec 	bl	8005b0a <USB_ReadInterrupts>
 8002132:	4603      	mov	r3, r0
 8002134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800213c:	f040 80c0 	bne.w	80022c0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fd0d 	bl	8005b64 <USB_ReadDevAllInEpInterrupt>
 800214a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002150:	e0b2      	b.n	80022b8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a7 	beq.w	80022ac <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fd33 	bl	8005bd4 <USB_ReadDevInEPInterrupt>
 800216e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d057      	beq.n	800222a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	2201      	movs	r2, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	43db      	mvns	r3, r3
 8002194:	69f9      	ldr	r1, [r7, #28]
 8002196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800219a:	4013      	ands	r3, r2
 800219c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021aa:	461a      	mov	r2, r3
 80021ac:	2301      	movs	r3, #1
 80021ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d132      	bne.n	800221e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3348      	adds	r3, #72	; 0x48
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4403      	add	r3, r0
 80021d8:	3344      	adds	r3, #68	; 0x44
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4419      	add	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4403      	add	r3, r0
 80021ec:	3348      	adds	r3, #72	; 0x48
 80021ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d113      	bne.n	800221e <HAL_PCD_IRQHandler+0x31c>
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3350      	adds	r3, #80	; 0x50
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d108      	bne.n	800221e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002216:	461a      	mov	r2, r3
 8002218:	2101      	movs	r1, #1
 800221a:	f003 fd3b 	bl	8005c94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f005 fc68 	bl	8007afa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002240:	461a      	mov	r2, r3
 8002242:	2308      	movs	r3, #8
 8002244:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800225c:	461a      	mov	r2, r3
 800225e:	2310      	movs	r3, #16
 8002260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4413      	add	r3, r2
 8002274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002278:	461a      	mov	r2, r3
 800227a:	2340      	movs	r3, #64	; 0x40
 800227c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002294:	461a      	mov	r2, r3
 8002296:	2302      	movs	r3, #2
 8002298:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fc1b 	bl	8002ae2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	3301      	adds	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f47f af49 	bne.w	8002152 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fc20 	bl	8005b0a <USB_ReadInterrupts>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d4:	d122      	bne.n	800231c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d108      	bne.n	8002306 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022fc:	2100      	movs	r1, #0
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fe26 	bl	8002f50 <HAL_PCDEx_LPM_Callback>
 8002304:	e002      	b.n	800230c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f005 fc6e 	bl	8007be8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fbf2 	bl	8005b0a <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002330:	d112      	bne.n	8002358 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f005 fc2a 	bl	8007b9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002356:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fbd4 	bl	8005b0a <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236c:	f040 80c7 	bne.w	80024fe <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2110      	movs	r1, #16
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fca2 	bl	8004cd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002394:	e056      	b.n	8002444 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a2:	461a      	mov	r2, r3
 80023a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ba:	0151      	lsls	r1, r2, #5
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	440a      	add	r2, r1
 80023c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023c8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023da:	0151      	lsls	r1, r2, #5
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	440a      	add	r2, r1
 80023e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f6:	461a      	mov	r2, r3
 80023f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240e:	0151      	lsls	r1, r2, #5
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	440a      	add	r2, r1
 8002414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002418:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800241c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800242e:	0151      	lsls	r1, r2, #5
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	440a      	add	r2, r1
 8002434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002438:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800243c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	3301      	adds	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244a:	429a      	cmp	r2, r3
 800244c:	d3a3      	bcc.n	8002396 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002460:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	2b00      	cmp	r3, #0
 8002468:	d016      	beq.n	8002498 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247a:	f043 030b 	orr.w	r3, r3, #11
 800247e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002490:	f043 030b 	orr.w	r3, r3, #11
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	e015      	b.n	80024c4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024aa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024be:	f043 030b 	orr.w	r3, r3, #11
 80024c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024e8:	461a      	mov	r2, r3
 80024ea:	f003 fbd3 	bl	8005c94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fb01 	bl	8005b0a <USB_ReadInterrupts>
 8002508:	4603      	mov	r3, r0
 800250a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	d124      	bne.n	800255e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 fb97 	bl	8005c4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fc37 	bl	8004d96 <USB_GetDevSpeed>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	f001 f950 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 8002538:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	4620      	mov	r0, r4
 8002544:	f002 f974 	bl	8004830 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f005 fafe 	bl	8007b4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695a      	ldr	r2, [r3, #20]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800255c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fad1 	bl	8005b0a <USB_ReadInterrupts>
 8002568:	4603      	mov	r3, r0
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b08      	cmp	r3, #8
 8002570:	d10a      	bne.n	8002588 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f005 fadb 	bl	8007b2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f002 0208 	and.w	r2, r2, #8
 8002586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f003 fabc 	bl	8005b0a <USB_ReadInterrupts>
 8002592:	4603      	mov	r3, r0
 8002594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259c:	d10f      	bne.n	80025be <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f005 fb3d 	bl	8007c28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 faa1 	bl	8005b0a <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d2:	d10f      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f005 fb10 	bl	8007c04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fa86 	bl	8005b0a <USB_ReadInterrupts>
 80025fe:	4603      	mov	r3, r0
 8002600:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002608:	d10a      	bne.n	8002620 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f005 fb1e 	bl	8007c4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800261e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f003 fa70 	bl	8005b0a <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d115      	bne.n	8002660 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f005 fb0e 	bl	8007c68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	430a      	orrs	r2, r1
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	e000      	b.n	8002660 <HAL_PCD_IRQHandler+0x75e>
      return;
 800265e:	bf00      	nop
    }
  }
}
 8002660:	3734      	adds	r7, #52	; 0x34
 8002662:	46bd      	mov	sp, r7
 8002664:	bd90      	pop	{r4, r7, pc}

08002666 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_PCD_SetAddress+0x1a>
 800267c:	2302      	movs	r3, #2
 800267e:	e013      	b.n	80026a8 <HAL_PCD_SetAddress+0x42>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f003 f9ce 	bl	8005a3a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	70fb      	strb	r3, [r7, #3]
 80026c2:	460b      	mov	r3, r1
 80026c4:	803b      	strh	r3, [r7, #0]
 80026c6:	4613      	mov	r3, r2
 80026c8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da0f      	bge.n	80026f6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	3338      	adds	r3, #56	; 0x38
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	3304      	adds	r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	705a      	strb	r2, [r3, #1]
 80026f4:	e00f      	b.n	8002716 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	f003 020f 	and.w	r2, r3, #15
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	3304      	adds	r3, #4
 800270e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002722:	883a      	ldrh	r2, [r7, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	78ba      	ldrb	r2, [r7, #2]
 800272c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002740:	78bb      	ldrb	r3, [r7, #2]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d102      	bne.n	800274c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_PCD_EP_Open+0xaa>
 8002756:	2302      	movs	r3, #2
 8002758:	e00e      	b.n	8002778 <HAL_PCD_EP_Open+0xc8>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fb39 	bl	8004de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002776:	7afb      	ldrb	r3, [r7, #11]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800278c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002790:	2b00      	cmp	r3, #0
 8002792:	da0f      	bge.n	80027b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	3338      	adds	r3, #56	; 0x38
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	705a      	strb	r2, [r3, #1]
 80027b2:	e00f      	b.n	80027d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	1a9b      	subs	r3, r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_PCD_EP_Close+0x6e>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e00e      	b.n	800280c <HAL_PCD_EP_Close+0x8c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68f9      	ldr	r1, [r7, #12]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 fb77 	bl	8004ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	460b      	mov	r3, r1
 8002822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002824:	7afb      	ldrb	r3, [r7, #11]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2200      	movs	r2, #0
 8002854:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	b2da      	uxtb	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d102      	bne.n	8002870 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	6979      	ldr	r1, [r7, #20]
 8002888:	f002 fe52 	bl	8005530 <USB_EP0StartXfer>
 800288c:	e008      	b.n	80028a0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	6979      	ldr	r1, [r7, #20]
 800289c:	f002 fc04 	bl	80050a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 020f 	and.w	r2, r3, #15
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028cc:	681b      	ldr	r3, [r3, #0]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	460b      	mov	r3, r1
 80028e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	3338      	adds	r3, #56	; 0x38
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4413      	add	r3, r2
 80028fe:	3304      	adds	r3, #4
 8002900:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2201      	movs	r2, #1
 8002918:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800291a:	7afb      	ldrb	r3, [r7, #11]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	b2da      	uxtb	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002934:	7afb      	ldrb	r3, [r7, #11]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	461a      	mov	r2, r3
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	f002 fdf0 	bl	8005530 <USB_EP0StartXfer>
 8002950:	e008      	b.n	8002964 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	6979      	ldr	r1, [r7, #20]
 8002960:	f002 fba2 	bl	80050a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d901      	bls.n	800298c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e050      	b.n	8002a2e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800298c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002990:	2b00      	cmp	r3, #0
 8002992:	da0f      	bge.n	80029b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3338      	adds	r3, #56	; 0x38
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	705a      	strb	r2, [r3, #1]
 80029b2:	e00d      	b.n	80029d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_PCD_EP_SetStall+0x82>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e01e      	b.n	8002a2e <HAL_PCD_EP_SetStall+0xc0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 ff47 	bl	8005892 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	b2d9      	uxtb	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f003 f938 	bl	8005c94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d901      	bls.n	8002a54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e042      	b.n	8002ada <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da0f      	bge.n	8002a7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	3338      	adds	r3, #56	; 0x38
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	3304      	adds	r3, #4
 8002a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2201      	movs	r2, #1
 8002a78:	705a      	strb	r2, [r3, #1]
 8002a7a:	e00f      	b.n	8002a9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 020f 	and.w	r2, r3, #15
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_PCD_EP_ClrStall+0x86>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e00e      	b.n	8002ada <HAL_PCD_EP_ClrStall+0xa4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68f9      	ldr	r1, [r7, #12]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 ff4f 	bl	800596e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08a      	sub	sp, #40	; 0x28
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	3338      	adds	r3, #56	; 0x38
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d901      	bls.n	8002b1a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06c      	b.n	8002bf4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d902      	bls.n	8002b36 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3303      	adds	r3, #3
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b3e:	e02b      	b.n	8002b98 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d902      	bls.n	8002b5c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3303      	adds	r3, #3
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68d9      	ldr	r1, [r3, #12]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4603      	mov	r3, r0
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f002 fe2b 	bl	80057d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	441a      	add	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	441a      	add	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d809      	bhi.n	8002bc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d203      	bcs.n	8002bc2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1be      	bne.n	8002b40 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d811      	bhi.n	8002bf2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	6939      	ldr	r1, [r7, #16]
 8002bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bee:	4013      	ands	r3, r2
 8002bf0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	333c      	adds	r3, #60	; 0x3c
 8002c14:	3304      	adds	r3, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f040 80a0 	bne.w	8002d74 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d015      	beq.n	8002c6a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a72      	ldr	r2, [pc, #456]	; (8002e0c <PCD_EP_OutXfrComplete_int+0x210>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	f240 80dd 	bls.w	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80d7 	beq.w	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c66:	6093      	str	r3, [r2, #8]
 8002c68:	e0cb      	b.n	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c80:	461a      	mov	r2, r3
 8002c82:	2320      	movs	r3, #32
 8002c84:	6093      	str	r3, [r2, #8]
 8002c86:	e0bc      	b.n	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80b7 	bne.w	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a5d      	ldr	r2, [pc, #372]	; (8002e0c <PCD_EP_OutXfrComplete_int+0x210>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d90f      	bls.n	8002cbc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb8:	6093      	str	r3, [r2, #8]
 8002cba:	e0a2      	b.n	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cce:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	0159      	lsls	r1, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002ce2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4403      	add	r3, r0
 8002cf2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002cf6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4403      	add	r3, r0
 8002d1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4419      	add	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4403      	add	r3, r0
 8002d30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d34:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d114      	bne.n	8002d66 <PCD_EP_OutXfrComplete_int+0x16a>
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2101      	movs	r1, #1
 8002d62:	f002 ff97 	bl	8005c94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f004 fea9 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
 8002d72:	e046      	b.n	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <PCD_EP_OutXfrComplete_int+0x214>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d124      	bne.n	8002dc6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d92:	461a      	mov	r2, r3
 8002d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d98:	6093      	str	r3, [r2, #8]
 8002d9a:	e032      	b.n	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db2:	461a      	mov	r2, r3
 8002db4:	2320      	movs	r3, #32
 8002db6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f004 fe80 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
 8002dc4:	e01d      	b.n	8002e02 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d114      	bne.n	8002df6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d108      	bne.n	8002df6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dee:	461a      	mov	r2, r3
 8002df0:	2100      	movs	r1, #0
 8002df2:	f002 ff4f 	bl	8005c94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f004 fe61 	bl	8007ac4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	4f54300a 	.word	0x4f54300a
 8002e10:	4f54310a 	.word	0x4f54310a

08002e14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	333c      	adds	r3, #60	; 0x3c
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d90e      	bls.n	8002e68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f004 fe19 	bl	8007aa0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d90c      	bls.n	8002e90 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d108      	bne.n	8002e90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	f002 ff02 	bl	8005c94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	4f54300a 	.word	0x4f54300a

08002ea0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
 8002eac:	4613      	mov	r3, r2
 8002eae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ebe:	883b      	ldrh	r3, [r7, #0]
 8002ec0:	0419      	lsls	r1, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ecc:	e028      	b.n	8002f20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4413      	add	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e00d      	b.n	8002efe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	3301      	adds	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3ec      	bcc.n	8002ee2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f08:	883b      	ldrh	r3, [r7, #0]
 8002f0a:	0418      	lsls	r0, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4302      	orrs	r2, r0
 8002f18:	3340      	adds	r3, #64	; 0x40
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e25b      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d075      	beq.n	8003072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f86:	4ba3      	ldr	r3, [pc, #652]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00c      	beq.n	8002fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f92:	4ba0      	ldr	r3, [pc, #640]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d112      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4b9d      	ldr	r3, [pc, #628]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	4b99      	ldr	r3, [pc, #612]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05b      	beq.n	8003070 <HAL_RCC_OscConfig+0x108>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d157      	bne.n	8003070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e236      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCC_OscConfig+0x74>
 8002fce:	4b91      	ldr	r3, [pc, #580]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a90      	ldr	r2, [pc, #576]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e01d      	b.n	8003018 <HAL_RCC_OscConfig+0xb0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x98>
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a8a      	ldr	r2, [pc, #552]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a87      	ldr	r2, [pc, #540]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0xb0>
 8003000:	4b84      	ldr	r3, [pc, #528]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a83      	ldr	r2, [pc, #524]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b81      	ldr	r3, [pc, #516]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a80      	ldr	r2, [pc, #512]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fade 	bl	80015e0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fada 	bl	80015e0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1fb      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0xc0>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe faca 	bl	80015e0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe fac6 	bl	80015e0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1e7      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	4b6c      	ldr	r3, [pc, #432]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0xe8>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d063      	beq.n	8003146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308a:	4b62      	ldr	r3, [pc, #392]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003092:	2b08      	cmp	r3, #8
 8003094:	d11c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d116      	bne.n	80030d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x152>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e1bb      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b56      	ldr	r3, [pc, #344]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4952      	ldr	r1, [pc, #328]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	e03a      	b.n	8003146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCC_OscConfig+0x2b0>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe fa7f 	bl	80015e0 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe fa7b 	bl	80015e0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e19c      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	4b46      	ldr	r3, [pc, #280]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b43      	ldr	r3, [pc, #268]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4940      	ldr	r1, [pc, #256]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	e015      	b.n	8003146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCC_OscConfig+0x2b0>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fa5e 	bl	80015e0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003128:	f7fe fa5a 	bl	80015e0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e17b      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	4b36      	ldr	r3, [pc, #216]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d030      	beq.n	80031b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_RCC_OscConfig+0x2b4>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fa3e 	bl	80015e0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe fa3a 	bl	80015e0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e15b      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4b26      	ldr	r3, [pc, #152]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x200>
 8003186:	e015      	b.n	80031b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x2b4>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe fa27 	bl	80015e0 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe fa23 	bl	80015e0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e144      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a0 	beq.w	8003302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x2b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d121      	bne.n	8003242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCC_OscConfig+0x2b8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a07      	ldr	r2, [pc, #28]	; (8003220 <HAL_RCC_OscConfig+0x2b8>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fe f9e9 	bl	80015e0 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	e011      	b.n	8003236 <HAL_RCC_OscConfig+0x2ce>
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	42470000 	.word	0x42470000
 800321c:	42470e80 	.word	0x42470e80
 8003220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003224:	f7fe f9dc 	bl	80015e0 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e0fd      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003236:	4b81      	ldr	r3, [pc, #516]	; (800343c <HAL_RCC_OscConfig+0x4d4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x2f0>
 800324a:	4b7d      	ldr	r3, [pc, #500]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a7c      	ldr	r2, [pc, #496]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	e01c      	b.n	8003292 <HAL_RCC_OscConfig+0x32a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0x312>
 8003260:	4b77      	ldr	r3, [pc, #476]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	4a76      	ldr	r2, [pc, #472]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6713      	str	r3, [r2, #112]	; 0x70
 800326c:	4b74      	ldr	r3, [pc, #464]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a73      	ldr	r2, [pc, #460]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	e00b      	b.n	8003292 <HAL_RCC_OscConfig+0x32a>
 800327a:	4b71      	ldr	r3, [pc, #452]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a70      	ldr	r2, [pc, #448]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	4b6e      	ldr	r3, [pc, #440]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a6d      	ldr	r2, [pc, #436]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 800328c:	f023 0304 	bic.w	r3, r3, #4
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d015      	beq.n	80032c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe f9a1 	bl	80015e0 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f99d 	bl	80015e0 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0bc      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	4b61      	ldr	r3, [pc, #388]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ee      	beq.n	80032a2 <HAL_RCC_OscConfig+0x33a>
 80032c4:	e014      	b.n	80032f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fe f98b 	bl	80015e0 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032cc:	e00a      	b.n	80032e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe f987 	bl	80015e0 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0a6      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e4:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ee      	bne.n	80032ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f6:	4b52      	ldr	r3, [pc, #328]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a51      	ldr	r2, [pc, #324]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 80032fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8092 	beq.w	8003430 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800330c:	4b4c      	ldr	r3, [pc, #304]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b08      	cmp	r3, #8
 8003316:	d05c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d141      	bne.n	80033a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003320:	4b48      	ldr	r3, [pc, #288]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe f95b 	bl	80015e0 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe f957 	bl	80015e0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e078      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003340:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	019b      	lsls	r3, r3, #6
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	3b01      	subs	r3, #1
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	4933      	ldr	r1, [pc, #204]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003376:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe f930 	bl	80015e0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003384:	f7fe f92c 	bl	80015e0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04d      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x41c>
 80033a2:	e045      	b.n	8003430 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fe f919 	bl	80015e0 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b2:	f7fe f915 	bl	80015e0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e036      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c4:	4b1e      	ldr	r3, [pc, #120]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <HAL_RCC_OscConfig+0x44a>
 80033d0:	e02e      	b.n	8003430 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e029      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <HAL_RCC_OscConfig+0x4d8>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d11c      	bne.n	800342c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d115      	bne.n	800342c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003406:	4013      	ands	r3, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800340c:	4293      	cmp	r3, r2
 800340e:	d10d      	bne.n	800342c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40007000 	.word	0x40007000
 8003440:	40023800 	.word	0x40023800
 8003444:	42470060 	.word	0x42470060

08003448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0cc      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d90c      	bls.n	8003484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b8      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d044      	beq.n	8003568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d119      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e07f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003502:	2b03      	cmp	r3, #3
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e06f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e067      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4934      	ldr	r1, [pc, #208]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7fe f852 	bl	80015e0 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe f84e 	bl	80015e0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20c      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e032      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4916      	ldr	r1, [pc, #88]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ce:	f000 f821 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd ffb2 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023c00 	.word	0x40023c00
 8003604:	40023800 	.word	0x40023800
 8003608:	08008ab4 	.word	0x08008ab4
 800360c:	20000000 	.word	0x20000000
 8003610:	20000004 	.word	0x20000004

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	2300      	movs	r3, #0
 8003626:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800362c:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d00d      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x40>
 8003638:	2b08      	cmp	r3, #8
 800363a:	f200 80bd 	bhi.w	80037b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d003      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x3a>
 8003646:	e0b7      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b61      	ldr	r3, [pc, #388]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800364a:	60bb      	str	r3, [r7, #8]
       break;
 800364c:	e0b7      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003650:	60bb      	str	r3, [r7, #8]
      break;
 8003652:	e0b4      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003654:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d04d      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b58      	ldr	r3, [pc, #352]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	461a      	mov	r2, r3
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	ea02 0800 	and.w	r8, r2, r0
 8003682:	ea03 0901 	and.w	r9, r3, r1
 8003686:	4640      	mov	r0, r8
 8003688:	4649      	mov	r1, r9
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	014b      	lsls	r3, r1, #5
 8003694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003698:	0142      	lsls	r2, r0, #5
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	ebb0 0008 	subs.w	r0, r0, r8
 80036a2:	eb61 0109 	sbc.w	r1, r1, r9
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036b4:	0182      	lsls	r2, r0, #6
 80036b6:	1a12      	subs	r2, r2, r0
 80036b8:	eb63 0301 	sbc.w	r3, r3, r1
 80036bc:	f04f 0000 	mov.w	r0, #0
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	00d9      	lsls	r1, r3, #3
 80036c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ca:	00d0      	lsls	r0, r2, #3
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	eb12 0208 	adds.w	r2, r2, r8
 80036d4:	eb43 0309 	adc.w	r3, r3, r9
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	0259      	lsls	r1, r3, #9
 80036e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036e6:	0250      	lsls	r0, r2, #9
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	f7fc fdd2 	bl	80002a0 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e04a      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	461a      	mov	r2, r3
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	ea02 0400 	and.w	r4, r2, r0
 800371e:	ea03 0501 	and.w	r5, r3, r1
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	014b      	lsls	r3, r1, #5
 8003730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003734:	0142      	lsls	r2, r0, #5
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	1b00      	subs	r0, r0, r4
 800373c:	eb61 0105 	sbc.w	r1, r1, r5
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	018b      	lsls	r3, r1, #6
 800374a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800374e:	0182      	lsls	r2, r0, #6
 8003750:	1a12      	subs	r2, r2, r0
 8003752:	eb63 0301 	sbc.w	r3, r3, r1
 8003756:	f04f 0000 	mov.w	r0, #0
 800375a:	f04f 0100 	mov.w	r1, #0
 800375e:	00d9      	lsls	r1, r3, #3
 8003760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003764:	00d0      	lsls	r0, r2, #3
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	1912      	adds	r2, r2, r4
 800376c:	eb45 0303 	adc.w	r3, r5, r3
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	0299      	lsls	r1, r3, #10
 800377a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800377e:	0290      	lsls	r0, r2, #10
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	461a      	mov	r2, r3
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f7fc fd86 	bl	80002a0 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	60bb      	str	r3, [r7, #8]
      break;
 80037b6:	e002      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ba:	60bb      	str	r3, [r7, #8]
      break;
 80037bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037be:	68bb      	ldr	r3, [r7, #8]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	007a1200 	.word	0x007a1200

080037d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_RCC_GetHCLKFreq+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000000 	.word	0x20000000

080037f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037f4:	f7ff fff0 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	0a9b      	lsrs	r3, r3, #10
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	4903      	ldr	r1, [pc, #12]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	08008ac4 	.word	0x08008ac4

08003818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800381c:	f7ff ffdc 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0b5b      	lsrs	r3, r3, #13
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK2Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	08008ac4 	.word	0x08008ac4

08003840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e01d      	b.n	800388e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fd2c 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 f82e 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d007      	beq.n	80038c8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a40      	ldr	r2, [pc, #256]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3b      	ldr	r2, [pc, #236]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d027      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d023      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d017      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <TIM_Base_SetConfig+0x128>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <TIM_Base_SetConfig+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <TIM_Base_SetConfig+0x130>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <TIM_Base_SetConfig+0x134>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <TIM_Base_SetConfig+0x138>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <TIM_Base_SetConfig+0x13c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40010400 	.word	0x40010400
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800
 8003a14:	40001800 	.word	0x40001800
 8003a18:	40001c00 	.word	0x40001c00
 8003a1c:	40002000 	.word	0x40002000

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e05a      	b.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a21      	ldr	r2, [pc, #132]	; (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d01d      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d018      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10c      	bne.n	8003adc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40010400 	.word	0x40010400
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40001800 	.word	0x40001800

08003b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e03f      	b.n	8003baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd fbe2 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa69 	bl	8004034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_UART_IRQHandler+0x52>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f996 	bl	8003f30 <UART_Receive_IT>
      return;
 8003c04:	e0d0      	b.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80b0 	beq.w	8003d6e <HAL_UART_IRQHandler+0x1ba>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_UART_IRQHandler+0x70>
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80a5 	beq.w	8003d6e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_UART_IRQHandler+0x90>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_UART_IRQHandler+0xb0>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	f043 0202 	orr.w	r2, r3, #2
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_UART_IRQHandler+0xd0>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	f043 0204 	orr.w	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00f      	beq.n	8003cae <HAL_UART_IRQHandler+0xfa>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_UART_IRQHandler+0xee>
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca6:	f043 0208 	orr.w	r2, r3, #8
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d077      	beq.n	8003da6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x11c>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f930 	bl	8003f30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x144>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d031      	beq.n	8003d5c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f879 	bl	8003df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d123      	bne.n	8003d54 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d28:	4a21      	ldr	r2, [pc, #132]	; (8003db0 <HAL_UART_IRQHandler+0x1fc>)
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fd fd96 	bl	8001862 <HAL_DMA_Abort_IT>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d016      	beq.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d46:	4610      	mov	r0, r2
 8003d48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4a:	e00e      	b.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f845 	bl	8003ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d52:	e00a      	b.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f841 	bl	8003ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5a:	e006      	b.n	8003d6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f83d 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d68:	e01d      	b.n	8003da6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	bf00      	nop
    return;
 8003d6c:	e01b      	b.n	8003da6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_UART_IRQHandler+0x1d6>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f866 	bl	8003e54 <UART_Transmit_IT>
    return;
 8003d88:	e00e      	b.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f8ae 	bl	8003f00 <UART_EndTransmit_IT>
    return;
 8003da4:	e000      	b.n	8003da8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003da6:	bf00      	nop
  }
}
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	08003e2d 	.word	0x08003e2d

08003db4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff ffc8 	bl	8003ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b21      	cmp	r3, #33	; 0x21
 8003e66:	d144      	bne.n	8003ef2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e70:	d11a      	bne.n	8003ea8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e86:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]
 8003e9a:	e00e      	b.n	8003eba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]
 8003ea6:	e008      	b.n	8003eba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	1c59      	adds	r1, r3, #1
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6211      	str	r1, [r2, #32]
 8003eb2:	781a      	ldrb	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003edc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff47 	bl	8003db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b22      	cmp	r3, #34	; 0x22
 8003f42:	d171      	bne.n	8004028 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d123      	bne.n	8003f96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10e      	bne.n	8003f7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
 8003f78:	e029      	b.n	8003fce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
 8003f94:	e01b      	b.n	8003fce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6858      	ldr	r0, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6291      	str	r1, [r2, #40]	; 0x28
 8003fae:	b2c2      	uxtb	r2, r0
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	e00c      	b.n	8003fce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	1c58      	adds	r0, r3, #1
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	6288      	str	r0, [r1, #40]	; 0x28
 8003fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d120      	bne.n	8004024 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0220 	bic.w	r2, r2, #32
 8003ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fed4 	bl	8003dc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	e002      	b.n	800402a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	b0bd      	sub	sp, #244	; 0xf4
 800403a:	af00      	add	r7, sp, #0
 800403c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800404c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004050:	68d9      	ldr	r1, [r3, #12]
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	ea40 0301 	orr.w	r3, r0, r1
 800405c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	431a      	orrs	r2, r3
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	431a      	orrs	r2, r3
 8004074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800408c:	f021 010c 	bic.w	r1, r1, #12
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800409a:	430b      	orrs	r3, r1
 800409c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	6999      	ldr	r1, [r3, #24]
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	ea40 0301 	orr.w	r3, r0, r1
 80040ba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c6:	f040 81a5 	bne.w	8004414 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4bcd      	ldr	r3, [pc, #820]	; (8004408 <UART_SetConfig+0x3d4>)
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d006      	beq.n	80040e4 <UART_SetConfig+0xb0>
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4bcb      	ldr	r3, [pc, #812]	; (800440c <UART_SetConfig+0x3d8>)
 80040de:	429a      	cmp	r2, r3
 80040e0:	f040 80cb 	bne.w	800427a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7ff fb98 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 80040e8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040f0:	461c      	mov	r4, r3
 80040f2:	f04f 0500 	mov.w	r5, #0
 80040f6:	4622      	mov	r2, r4
 80040f8:	462b      	mov	r3, r5
 80040fa:	1891      	adds	r1, r2, r2
 80040fc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004100:	415b      	adcs	r3, r3
 8004102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004106:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800410a:	1912      	adds	r2, r2, r4
 800410c:	eb45 0303 	adc.w	r3, r5, r3
 8004110:	f04f 0000 	mov.w	r0, #0
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	00d9      	lsls	r1, r3, #3
 800411a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800411e:	00d0      	lsls	r0, r2, #3
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	1911      	adds	r1, r2, r4
 8004126:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800412a:	416b      	adcs	r3, r5
 800412c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	461a      	mov	r2, r3
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	1891      	adds	r1, r2, r2
 800413e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004142:	415b      	adcs	r3, r3
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004148:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800414c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004150:	f7fc f8a6 	bl	80002a0 <__aeabi_uldivmod>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4bad      	ldr	r3, [pc, #692]	; (8004410 <UART_SetConfig+0x3dc>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	011e      	lsls	r6, r3, #4
 8004162:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004166:	461c      	mov	r4, r3
 8004168:	f04f 0500 	mov.w	r5, #0
 800416c:	4622      	mov	r2, r4
 800416e:	462b      	mov	r3, r5
 8004170:	1891      	adds	r1, r2, r2
 8004172:	67b9      	str	r1, [r7, #120]	; 0x78
 8004174:	415b      	adcs	r3, r3
 8004176:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004178:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800417c:	1912      	adds	r2, r2, r4
 800417e:	eb45 0303 	adc.w	r3, r5, r3
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	00d9      	lsls	r1, r3, #3
 800418c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004190:	00d0      	lsls	r0, r2, #3
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	1911      	adds	r1, r2, r4
 8004198:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800419c:	416b      	adcs	r3, r5
 800419e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	461a      	mov	r2, r3
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	1891      	adds	r1, r2, r2
 80041b0:	6739      	str	r1, [r7, #112]	; 0x70
 80041b2:	415b      	adcs	r3, r3
 80041b4:	677b      	str	r3, [r7, #116]	; 0x74
 80041b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80041ba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80041be:	f7fc f86f 	bl	80002a0 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4b92      	ldr	r3, [pc, #584]	; (8004410 <UART_SetConfig+0x3dc>)
 80041c8:	fba3 1302 	umull	r1, r3, r3, r2
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	2164      	movs	r1, #100	; 0x64
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	3332      	adds	r3, #50	; 0x32
 80041da:	4a8d      	ldr	r2, [pc, #564]	; (8004410 <UART_SetConfig+0x3dc>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041e8:	441e      	add	r6, r3
 80041ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041ee:	4618      	mov	r0, r3
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	1894      	adds	r4, r2, r2
 80041fa:	66bc      	str	r4, [r7, #104]	; 0x68
 80041fc:	415b      	adcs	r3, r3
 80041fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004200:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004204:	1812      	adds	r2, r2, r0
 8004206:	eb41 0303 	adc.w	r3, r1, r3
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	f04f 0500 	mov.w	r5, #0
 8004212:	00dd      	lsls	r5, r3, #3
 8004214:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004218:	00d4      	lsls	r4, r2, #3
 800421a:	4622      	mov	r2, r4
 800421c:	462b      	mov	r3, r5
 800421e:	1814      	adds	r4, r2, r0
 8004220:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004224:	414b      	adcs	r3, r1
 8004226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	461a      	mov	r2, r3
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	1891      	adds	r1, r2, r2
 8004238:	6639      	str	r1, [r7, #96]	; 0x60
 800423a:	415b      	adcs	r3, r3
 800423c:	667b      	str	r3, [r7, #100]	; 0x64
 800423e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004246:	f7fc f82b 	bl	80002a0 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4b70      	ldr	r3, [pc, #448]	; (8004410 <UART_SetConfig+0x3dc>)
 8004250:	fba3 1302 	umull	r1, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	2164      	movs	r1, #100	; 0x64
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	3332      	adds	r3, #50	; 0x32
 8004262:	4a6b      	ldr	r2, [pc, #428]	; (8004410 <UART_SetConfig+0x3dc>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 0207 	and.w	r2, r3, #7
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4432      	add	r2, r6
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	e26d      	b.n	8004756 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800427a:	f7ff fab9 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 800427e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004286:	461c      	mov	r4, r3
 8004288:	f04f 0500 	mov.w	r5, #0
 800428c:	4622      	mov	r2, r4
 800428e:	462b      	mov	r3, r5
 8004290:	1891      	adds	r1, r2, r2
 8004292:	65b9      	str	r1, [r7, #88]	; 0x58
 8004294:	415b      	adcs	r3, r3
 8004296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004298:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800429c:	1912      	adds	r2, r2, r4
 800429e:	eb45 0303 	adc.w	r3, r5, r3
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f04f 0100 	mov.w	r1, #0
 80042aa:	00d9      	lsls	r1, r3, #3
 80042ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042b0:	00d0      	lsls	r0, r2, #3
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	1911      	adds	r1, r2, r4
 80042b8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80042bc:	416b      	adcs	r3, r5
 80042be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	461a      	mov	r2, r3
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	1891      	adds	r1, r2, r2
 80042d0:	6539      	str	r1, [r7, #80]	; 0x50
 80042d2:	415b      	adcs	r3, r3
 80042d4:	657b      	str	r3, [r7, #84]	; 0x54
 80042d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042da:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80042de:	f7fb ffdf 	bl	80002a0 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <UART_SetConfig+0x3dc>)
 80042e8:	fba3 2302 	umull	r2, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	011e      	lsls	r6, r3, #4
 80042f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042f4:	461c      	mov	r4, r3
 80042f6:	f04f 0500 	mov.w	r5, #0
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	1891      	adds	r1, r2, r2
 8004300:	64b9      	str	r1, [r7, #72]	; 0x48
 8004302:	415b      	adcs	r3, r3
 8004304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004306:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800430a:	1912      	adds	r2, r2, r4
 800430c:	eb45 0303 	adc.w	r3, r5, r3
 8004310:	f04f 0000 	mov.w	r0, #0
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	00d9      	lsls	r1, r3, #3
 800431a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800431e:	00d0      	lsls	r0, r2, #3
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	1911      	adds	r1, r2, r4
 8004326:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800432a:	416b      	adcs	r3, r5
 800432c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	461a      	mov	r2, r3
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	1891      	adds	r1, r2, r2
 800433e:	6439      	str	r1, [r7, #64]	; 0x40
 8004340:	415b      	adcs	r3, r3
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004348:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800434c:	f7fb ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4b2e      	ldr	r3, [pc, #184]	; (8004410 <UART_SetConfig+0x3dc>)
 8004356:	fba3 1302 	umull	r1, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2164      	movs	r1, #100	; 0x64
 800435e:	fb01 f303 	mul.w	r3, r1, r3
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	3332      	adds	r3, #50	; 0x32
 8004368:	4a29      	ldr	r2, [pc, #164]	; (8004410 <UART_SetConfig+0x3dc>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004376:	441e      	add	r6, r3
 8004378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800437c:	4618      	mov	r0, r3
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	1894      	adds	r4, r2, r2
 8004388:	63bc      	str	r4, [r7, #56]	; 0x38
 800438a:	415b      	adcs	r3, r3
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004392:	1812      	adds	r2, r2, r0
 8004394:	eb41 0303 	adc.w	r3, r1, r3
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	f04f 0500 	mov.w	r5, #0
 80043a0:	00dd      	lsls	r5, r3, #3
 80043a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043a6:	00d4      	lsls	r4, r2, #3
 80043a8:	4622      	mov	r2, r4
 80043aa:	462b      	mov	r3, r5
 80043ac:	1814      	adds	r4, r2, r0
 80043ae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80043b2:	414b      	adcs	r3, r1
 80043b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	461a      	mov	r2, r3
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	6339      	str	r1, [r7, #48]	; 0x30
 80043c8:	415b      	adcs	r3, r3
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
 80043cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043d0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043d4:	f7fb ff64 	bl	80002a0 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <UART_SetConfig+0x3dc>)
 80043de:	fba3 1302 	umull	r1, r3, r3, r2
 80043e2:	095b      	lsrs	r3, r3, #5
 80043e4:	2164      	movs	r1, #100	; 0x64
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	3332      	adds	r3, #50	; 0x32
 80043f0:	4a07      	ldr	r2, [pc, #28]	; (8004410 <UART_SetConfig+0x3dc>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	f003 0207 	and.w	r2, r3, #7
 80043fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4432      	add	r2, r6
 8004404:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004406:	e1a6      	b.n	8004756 <UART_SetConfig+0x722>
 8004408:	40011000 	.word	0x40011000
 800440c:	40011400 	.word	0x40011400
 8004410:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4bd1      	ldr	r3, [pc, #836]	; (8004760 <UART_SetConfig+0x72c>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d006      	beq.n	800442e <UART_SetConfig+0x3fa>
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4bcf      	ldr	r3, [pc, #828]	; (8004764 <UART_SetConfig+0x730>)
 8004428:	429a      	cmp	r2, r3
 800442a:	f040 80ca 	bne.w	80045c2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800442e:	f7ff f9f3 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 8004432:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800443a:	461c      	mov	r4, r3
 800443c:	f04f 0500 	mov.w	r5, #0
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	1891      	adds	r1, r2, r2
 8004446:	62b9      	str	r1, [r7, #40]	; 0x28
 8004448:	415b      	adcs	r3, r3
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800444c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004450:	1912      	adds	r2, r2, r4
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	00d9      	lsls	r1, r3, #3
 8004460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004464:	00d0      	lsls	r0, r2, #3
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	eb12 0a04 	adds.w	sl, r2, r4
 800446e:	eb43 0b05 	adc.w	fp, r3, r5
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4618      	mov	r0, r3
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	008b      	lsls	r3, r1, #2
 8004488:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800448c:	0082      	lsls	r2, r0, #2
 800448e:	4650      	mov	r0, sl
 8004490:	4659      	mov	r1, fp
 8004492:	f7fb ff05 	bl	80002a0 <__aeabi_uldivmod>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4bb3      	ldr	r3, [pc, #716]	; (8004768 <UART_SetConfig+0x734>)
 800449c:	fba3 2302 	umull	r2, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	011e      	lsls	r6, r3, #4
 80044a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044a8:	4618      	mov	r0, r3
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	1894      	adds	r4, r2, r2
 80044b4:	623c      	str	r4, [r7, #32]
 80044b6:	415b      	adcs	r3, r3
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044be:	1812      	adds	r2, r2, r0
 80044c0:	eb41 0303 	adc.w	r3, r1, r3
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	f04f 0500 	mov.w	r5, #0
 80044cc:	00dd      	lsls	r5, r3, #3
 80044ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044d2:	00d4      	lsls	r4, r2, #3
 80044d4:	4622      	mov	r2, r4
 80044d6:	462b      	mov	r3, r5
 80044d8:	1814      	adds	r4, r2, r0
 80044da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80044de:	414b      	adcs	r3, r1
 80044e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044fe:	0082      	lsls	r2, r0, #2
 8004500:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004504:	f7fb fecc 	bl	80002a0 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4b96      	ldr	r3, [pc, #600]	; (8004768 <UART_SetConfig+0x734>)
 800450e:	fba3 1302 	umull	r1, r3, r3, r2
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2164      	movs	r1, #100	; 0x64
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	3332      	adds	r3, #50	; 0x32
 8004520:	4a91      	ldr	r2, [pc, #580]	; (8004768 <UART_SetConfig+0x734>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452c:	441e      	add	r6, r3
 800452e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004532:	4618      	mov	r0, r3
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	1894      	adds	r4, r2, r2
 800453e:	61bc      	str	r4, [r7, #24]
 8004540:	415b      	adcs	r3, r3
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004548:	1812      	adds	r2, r2, r0
 800454a:	eb41 0303 	adc.w	r3, r1, r3
 800454e:	f04f 0400 	mov.w	r4, #0
 8004552:	f04f 0500 	mov.w	r5, #0
 8004556:	00dd      	lsls	r5, r3, #3
 8004558:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800455c:	00d4      	lsls	r4, r2, #3
 800455e:	4622      	mov	r2, r4
 8004560:	462b      	mov	r3, r5
 8004562:	1814      	adds	r4, r2, r0
 8004564:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004568:	414b      	adcs	r3, r1
 800456a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4618      	mov	r0, r3
 8004576:	f04f 0100 	mov.w	r1, #0
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	008b      	lsls	r3, r1, #2
 8004584:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004588:	0082      	lsls	r2, r0, #2
 800458a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800458e:	f7fb fe87 	bl	80002a0 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4b74      	ldr	r3, [pc, #464]	; (8004768 <UART_SetConfig+0x734>)
 8004598:	fba3 1302 	umull	r1, r3, r3, r2
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	2164      	movs	r1, #100	; 0x64
 80045a0:	fb01 f303 	mul.w	r3, r1, r3
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	3332      	adds	r3, #50	; 0x32
 80045aa:	4a6f      	ldr	r2, [pc, #444]	; (8004768 <UART_SetConfig+0x734>)
 80045ac:	fba2 2303 	umull	r2, r3, r2, r3
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	f003 020f 	and.w	r2, r3, #15
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4432      	add	r2, r6
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	e0c9      	b.n	8004756 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045c2:	f7ff f915 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 80045c6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045ce:	461c      	mov	r4, r3
 80045d0:	f04f 0500 	mov.w	r5, #0
 80045d4:	4622      	mov	r2, r4
 80045d6:	462b      	mov	r3, r5
 80045d8:	1891      	adds	r1, r2, r2
 80045da:	6139      	str	r1, [r7, #16]
 80045dc:	415b      	adcs	r3, r3
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045e4:	1912      	adds	r2, r2, r4
 80045e6:	eb45 0303 	adc.w	r3, r5, r3
 80045ea:	f04f 0000 	mov.w	r0, #0
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	00d9      	lsls	r1, r3, #3
 80045f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045f8:	00d0      	lsls	r0, r2, #3
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	eb12 0804 	adds.w	r8, r2, r4
 8004602:	eb43 0905 	adc.w	r9, r3, r5
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4618      	mov	r0, r3
 800460e:	f04f 0100 	mov.w	r1, #0
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004620:	0082      	lsls	r2, r0, #2
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	f7fb fe3b 	bl	80002a0 <__aeabi_uldivmod>
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <UART_SetConfig+0x734>)
 8004630:	fba3 2302 	umull	r2, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	011e      	lsls	r6, r3, #4
 8004638:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800463c:	4618      	mov	r0, r3
 800463e:	f04f 0100 	mov.w	r1, #0
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	1894      	adds	r4, r2, r2
 8004648:	60bc      	str	r4, [r7, #8]
 800464a:	415b      	adcs	r3, r3
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004652:	1812      	adds	r2, r2, r0
 8004654:	eb41 0303 	adc.w	r3, r1, r3
 8004658:	f04f 0400 	mov.w	r4, #0
 800465c:	f04f 0500 	mov.w	r5, #0
 8004660:	00dd      	lsls	r5, r3, #3
 8004662:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004666:	00d4      	lsls	r4, r2, #3
 8004668:	4622      	mov	r2, r4
 800466a:	462b      	mov	r3, r5
 800466c:	1814      	adds	r4, r2, r0
 800466e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004672:	414b      	adcs	r3, r1
 8004674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4618      	mov	r0, r3
 8004680:	f04f 0100 	mov.w	r1, #0
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	008b      	lsls	r3, r1, #2
 800468e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004692:	0082      	lsls	r2, r0, #2
 8004694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004698:	f7fb fe02 	bl	80002a0 <__aeabi_uldivmod>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4b31      	ldr	r3, [pc, #196]	; (8004768 <UART_SetConfig+0x734>)
 80046a2:	fba3 1302 	umull	r1, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	2164      	movs	r1, #100	; 0x64
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	3332      	adds	r3, #50	; 0x32
 80046b4:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <UART_SetConfig+0x734>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c0:	441e      	add	r6, r3
 80046c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046c6:	4618      	mov	r0, r3
 80046c8:	f04f 0100 	mov.w	r1, #0
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	1894      	adds	r4, r2, r2
 80046d2:	603c      	str	r4, [r7, #0]
 80046d4:	415b      	adcs	r3, r3
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046dc:	1812      	adds	r2, r2, r0
 80046de:	eb41 0303 	adc.w	r3, r1, r3
 80046e2:	f04f 0400 	mov.w	r4, #0
 80046e6:	f04f 0500 	mov.w	r5, #0
 80046ea:	00dd      	lsls	r5, r3, #3
 80046ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046f0:	00d4      	lsls	r4, r2, #3
 80046f2:	4622      	mov	r2, r4
 80046f4:	462b      	mov	r3, r5
 80046f6:	1814      	adds	r4, r2, r0
 80046f8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80046fc:	414b      	adcs	r3, r1
 80046fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	008b      	lsls	r3, r1, #2
 8004718:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800471c:	0082      	lsls	r2, r0, #2
 800471e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004722:	f7fb fdbd 	bl	80002a0 <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <UART_SetConfig+0x734>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	; 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <UART_SetConfig+0x734>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4432      	add	r2, r6
 8004752:	609a      	str	r2, [r3, #8]
}
 8004754:	e7ff      	b.n	8004756 <UART_SetConfig+0x722>
 8004756:	bf00      	nop
 8004758:	37f4      	adds	r7, #244	; 0xf4
 800475a:	46bd      	mov	sp, r7
 800475c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004760:	40011000 	.word	0x40011000
 8004764:	40011400 	.word	0x40011400
 8004768:	51eb851f 	.word	0x51eb851f

0800476c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800476c:	b084      	sub	sp, #16
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	f107 001c 	add.w	r0, r7, #28
 800477a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2b01      	cmp	r3, #1
 8004782:	d122      	bne.n	80047ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f001 fac6 	bl	8005d50 <USB_CoreReset>
 80047c4:	4603      	mov	r3, r0
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e01a      	b.n	8004800 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f001 faba 	bl	8005d50 <USB_CoreReset>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
 80047f2:	e005      	b.n	8004800 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	2b01      	cmp	r3, #1
 8004804:	d10b      	bne.n	800481e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f043 0206 	orr.w	r2, r3, #6
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800482a:	b004      	add	sp, #16
 800482c:	4770      	bx	lr
	...

08004830 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d165      	bne.n	8004910 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a41      	ldr	r2, [pc, #260]	; (800494c <USB_SetTurnaroundTime+0x11c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d906      	bls.n	800485a <USB_SetTurnaroundTime+0x2a>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4a40      	ldr	r2, [pc, #256]	; (8004950 <USB_SetTurnaroundTime+0x120>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d202      	bcs.n	800485a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004854:	230f      	movs	r3, #15
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e062      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a3c      	ldr	r2, [pc, #240]	; (8004950 <USB_SetTurnaroundTime+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d306      	bcc.n	8004870 <USB_SetTurnaroundTime+0x40>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <USB_SetTurnaroundTime+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d202      	bcs.n	8004870 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800486a:	230e      	movs	r3, #14
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e057      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a38      	ldr	r2, [pc, #224]	; (8004954 <USB_SetTurnaroundTime+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d306      	bcc.n	8004886 <USB_SetTurnaroundTime+0x56>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a37      	ldr	r2, [pc, #220]	; (8004958 <USB_SetTurnaroundTime+0x128>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d202      	bcs.n	8004886 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004880:	230d      	movs	r3, #13
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e04c      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4a33      	ldr	r2, [pc, #204]	; (8004958 <USB_SetTurnaroundTime+0x128>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d306      	bcc.n	800489c <USB_SetTurnaroundTime+0x6c>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4a32      	ldr	r2, [pc, #200]	; (800495c <USB_SetTurnaroundTime+0x12c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d802      	bhi.n	800489c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004896:	230c      	movs	r3, #12
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e041      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4a2f      	ldr	r2, [pc, #188]	; (800495c <USB_SetTurnaroundTime+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d906      	bls.n	80048b2 <USB_SetTurnaroundTime+0x82>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4a2e      	ldr	r2, [pc, #184]	; (8004960 <USB_SetTurnaroundTime+0x130>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d802      	bhi.n	80048b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048ac:	230b      	movs	r3, #11
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e036      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <USB_SetTurnaroundTime+0x130>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d906      	bls.n	80048c8 <USB_SetTurnaroundTime+0x98>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a29      	ldr	r2, [pc, #164]	; (8004964 <USB_SetTurnaroundTime+0x134>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d802      	bhi.n	80048c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048c2:	230a      	movs	r3, #10
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	e02b      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a26      	ldr	r2, [pc, #152]	; (8004964 <USB_SetTurnaroundTime+0x134>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d906      	bls.n	80048de <USB_SetTurnaroundTime+0xae>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4a25      	ldr	r2, [pc, #148]	; (8004968 <USB_SetTurnaroundTime+0x138>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d202      	bcs.n	80048de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048d8:	2309      	movs	r3, #9
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e020      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a21      	ldr	r2, [pc, #132]	; (8004968 <USB_SetTurnaroundTime+0x138>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d306      	bcc.n	80048f4 <USB_SetTurnaroundTime+0xc4>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	4a20      	ldr	r2, [pc, #128]	; (800496c <USB_SetTurnaroundTime+0x13c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d802      	bhi.n	80048f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048ee:	2308      	movs	r3, #8
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	e015      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a1d      	ldr	r2, [pc, #116]	; (800496c <USB_SetTurnaroundTime+0x13c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d906      	bls.n	800490a <USB_SetTurnaroundTime+0xda>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <USB_SetTurnaroundTime+0x140>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d202      	bcs.n	800490a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004904:	2307      	movs	r3, #7
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e00a      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800490a:	2306      	movs	r3, #6
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e007      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004916:	2309      	movs	r3, #9
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e001      	b.n	8004920 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800491c:	2309      	movs	r3, #9
 800491e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	029b      	lsls	r3, r3, #10
 8004934:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	00d8acbf 	.word	0x00d8acbf
 8004950:	00e4e1c0 	.word	0x00e4e1c0
 8004954:	00f42400 	.word	0x00f42400
 8004958:	01067380 	.word	0x01067380
 800495c:	011a499f 	.word	0x011a499f
 8004960:	01312cff 	.word	0x01312cff
 8004964:	014ca43f 	.word	0x014ca43f
 8004968:	016e3600 	.word	0x016e3600
 800496c:	01a6ab1f 	.word	0x01a6ab1f
 8004970:	01e84800 	.word	0x01e84800

08004974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f043 0201 	orr.w	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d106      	bne.n	80049e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	e00b      	b.n	80049fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	e001      	b.n	80049fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e003      	b.n	8004a04 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80049fc:	2032      	movs	r0, #50	; 0x32
 80049fe:	f7fc fdfb 	bl	80015f8 <HAL_Delay>

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e009      	b.n	8004a40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	3340      	adds	r3, #64	; 0x40
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	2200      	movs	r2, #0
 8004a38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	2b0e      	cmp	r3, #14
 8004a44:	d9f2      	bls.n	8004a2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11c      	bne.n	8004a86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a5a:	f043 0302 	orr.w	r3, r3, #2
 8004a5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38
 8004a84:	e00b      	b.n	8004a9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	461a      	mov	r2, r3
 8004aba:	680b      	ldr	r3, [r1, #0]
 8004abc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d10c      	bne.n	8004ade <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004aca:	2100      	movs	r1, #0
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f949 	bl	8004d64 <USB_SetDevSpeed>
 8004ad2:	e008      	b.n	8004ae6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f944 	bl	8004d64 <USB_SetDevSpeed>
 8004adc:	e003      	b.n	8004ae6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ade:	2103      	movs	r1, #3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f93f 	bl	8004d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ae6:	2110      	movs	r1, #16
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8f3 	bl	8004cd4 <USB_FlushTxFifo>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f911 	bl	8004d20 <USB_FlushRxFifo>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	461a      	mov	r2, r3
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	e043      	b.n	8004bba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b48:	d118      	bne.n	8004b7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e013      	b.n	8004b8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b72:	461a      	mov	r2, r3
 8004b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e008      	b.n	8004b8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	461a      	mov	r2, r3
 8004bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d3b7      	bcc.n	8004b32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e043      	b.n	8004c50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bde:	d118      	bne.n	8004c12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e013      	b.n	8004c24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	e008      	b.n	8004c24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	461a      	mov	r2, r3
 8004c20:	2300      	movs	r3, #0
 8004c22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	461a      	mov	r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	461a      	mov	r2, r3
 8004c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d3b7      	bcc.n	8004bc8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f043 0210 	orr.w	r2, r3, #16
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699a      	ldr	r2, [r3, #24]
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <USB_DevInit+0x2c4>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f043 0208 	orr.w	r2, r3, #8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d107      	bne.n	8004cc0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ccc:	b004      	add	sp, #16
 8004cce:	4770      	bx	lr
 8004cd0:	803c3800 	.word	0x803c3800

08004cd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	019b      	lsls	r3, r3, #6
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <USB_FlushTxFifo+0x48>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e006      	b.n	8004d0e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	d0f0      	beq.n	8004cee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	00030d40 	.word	0x00030d40

08004d20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2210      	movs	r2, #16
 8004d30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <USB_FlushRxFifo+0x40>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e006      	b.n	8004d52 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d0f0      	beq.n	8004d32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	00030d40 	.word	0x00030d40

08004d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b087      	sub	sp, #28
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 0306 	and.w	r3, r3, #6
 8004dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]
 8004dba:	e00a      	b.n	8004dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d002      	beq.n	8004dc8 <USB_GetDevSpeed+0x32>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b06      	cmp	r3, #6
 8004dc6:	d102      	bne.n	8004dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	75fb      	strb	r3, [r7, #23]
 8004dcc:	e001      	b.n	8004dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dce:	230f      	movs	r3, #15
 8004dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d13a      	bne.n	8004e72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d155      	bne.n	8004ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	78db      	ldrb	r3, [r3, #3]
 8004e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	059b      	lsls	r3, r3, #22
 8004e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	e036      	b.n	8004ee0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	2101      	movs	r1, #1
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11a      	bne.n	8004ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	78db      	ldrb	r3, [r3, #3]
 8004ec4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	0151      	lsls	r1, r2, #5
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	440a      	add	r2, r1
 8004ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ede:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	785b      	ldrb	r3, [r3, #1]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d161      	bne.n	8004fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f22:	d11f      	bne.n	8004f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	2101      	movs	r1, #1
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f84:	4013      	ands	r3, r2
 8004f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	2101      	movs	r1, #1
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	0159      	lsls	r1, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	440b      	add	r3, r1
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4b35      	ldr	r3, [pc, #212]	; (80050a0 <USB_DeactivateEndpoint+0x1b0>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]
 8004fce:	e060      	b.n	8005092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe6:	d11f      	bne.n	8005028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	2101      	movs	r1, #1
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	43db      	mvns	r3, r3
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005048:	4013      	ands	r3, r2
 800504a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	2101      	movs	r1, #1
 800505e:	fa01 f303 	lsl.w	r3, r1, r3
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	43db      	mvns	r3, r3
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800506c:	4013      	ands	r3, r2
 800506e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0159      	lsls	r1, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	440b      	add	r3, r1
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	4619      	mov	r1, r3
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <USB_DeactivateEndpoint+0x1b4>)
 800508e:	4013      	ands	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	ec337800 	.word	0xec337800
 80050a4:	eff37800 	.word	0xeff37800

080050a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	f040 815c 	bne.w	8005382 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d132      	bne.n	8005138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005130:	0cdb      	lsrs	r3, r3, #19
 8005132:	04db      	lsls	r3, r3, #19
 8005134:	6113      	str	r3, [r2, #16]
 8005136:	e074      	b.n	8005222 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005152:	0cdb      	lsrs	r3, r3, #19
 8005154:	04db      	lsls	r3, r3, #19
 8005156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005172:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005176:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800517a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6959      	ldr	r1, [r3, #20]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	440b      	add	r3, r1
 8005194:	1e59      	subs	r1, r3, #1
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	fbb1 f3f3 	udiv	r3, r1, r3
 800519e:	04d9      	lsls	r1, r3, #19
 80051a0:	4b9d      	ldr	r3, [pc, #628]	; (8005418 <USB_EPStartXfer+0x370>)
 80051a2:	400b      	ands	r3, r1
 80051a4:	69b9      	ldr	r1, [r7, #24]
 80051a6:	0148      	lsls	r0, r1, #5
 80051a8:	69f9      	ldr	r1, [r7, #28]
 80051aa:	4401      	add	r1, r0
 80051ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051b0:	4313      	orrs	r3, r2
 80051b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ca:	69b9      	ldr	r1, [r7, #24]
 80051cc:	0148      	lsls	r0, r1, #5
 80051ce:	69f9      	ldr	r1, [r7, #28]
 80051d0:	4401      	add	r1, r0
 80051d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051d6:	4313      	orrs	r3, r2
 80051d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d11f      	bne.n	8005222 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005200:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005220:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d14b      	bne.n	80052c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	461a      	mov	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	78db      	ldrb	r3, [r3, #3]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d128      	bne.n	800529e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d110      	bne.n	800527e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	0151      	lsls	r1, r2, #5
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	440a      	add	r2, r1
 8005272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	e00f      	b.n	800529e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e12f      	b.n	8005520 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	78db      	ldrb	r3, [r3, #3]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d015      	beq.n	8005314 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8117 	beq.w	8005520 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	2101      	movs	r1, #1
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	69f9      	ldr	r1, [r7, #28]
 800530a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800530e:	4313      	orrs	r3, r2
 8005310:	634b      	str	r3, [r1, #52]	; 0x34
 8005312:	e105      	b.n	8005520 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d110      	bne.n	8005346 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e00f      	b.n	8005366 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	0151      	lsls	r1, r2, #5
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	440a      	add	r2, r1
 800535c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005364:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	68d9      	ldr	r1, [r3, #12]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	b298      	uxth	r0, r3
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4603      	mov	r3, r0
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa2b 	bl	80057d6 <USB_WritePacket>
 8005380:	e0ce      	b.n	8005520 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	0cdb      	lsrs	r3, r3, #19
 800539e:	04db      	lsls	r3, r3, #19
 80053a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d126      	bne.n	800541c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	69b9      	ldr	r1, [r7, #24]
 80053e6:	0148      	lsls	r0, r1, #5
 80053e8:	69f9      	ldr	r1, [r7, #28]
 80053ea:	4401      	add	r1, r0
 80053ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053f0:	4313      	orrs	r3, r2
 80053f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005412:	6113      	str	r3, [r2, #16]
 8005414:	e036      	b.n	8005484 <USB_EPStartXfer+0x3dc>
 8005416:	bf00      	nop
 8005418:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	695a      	ldr	r2, [r3, #20]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4413      	add	r3, r2
 8005426:	1e5a      	subs	r2, r3, #1
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	8afb      	ldrh	r3, [r7, #22]
 8005442:	04d9      	lsls	r1, r3, #19
 8005444:	4b39      	ldr	r3, [pc, #228]	; (800552c <USB_EPStartXfer+0x484>)
 8005446:	400b      	ands	r3, r1
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	0148      	lsls	r0, r1, #5
 800544c:	69f9      	ldr	r1, [r7, #28]
 800544e:	4401      	add	r1, r0
 8005450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	8af9      	ldrh	r1, [r7, #22]
 800546c:	fb01 f303 	mul.w	r3, r1, r3
 8005470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	0148      	lsls	r0, r1, #5
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	4401      	add	r1, r0
 800547c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005480:	4313      	orrs	r3, r2
 8005482:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d10d      	bne.n	80054a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68d9      	ldr	r1, [r3, #12]
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	460a      	mov	r2, r1
 80054a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d128      	bne.n	8005500 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d110      	bne.n	80054e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	e00f      	b.n	8005500 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	440a      	add	r2, r1
 8005516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800551e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	1ff80000 	.word	0x1ff80000

08005530 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b01      	cmp	r3, #1
 800554e:	f040 80cd 	bne.w	80056ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d132      	bne.n	80055c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800557c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800559c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b8:	0cdb      	lsrs	r3, r3, #19
 80055ba:	04db      	lsls	r3, r3, #19
 80055bc:	6113      	str	r3, [r2, #16]
 80055be:	e04e      	b.n	800565e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055da:	0cdb      	lsrs	r3, r3, #19
 80055dc:	04db      	lsls	r3, r3, #19
 80055de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005602:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d903      	bls.n	8005618 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564e:	6939      	ldr	r1, [r7, #16]
 8005650:	0148      	lsls	r0, r1, #5
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	4401      	add	r1, r0
 8005656:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800565a:	4313      	orrs	r3, r2
 800565c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d11e      	bne.n	80056a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e092      	b.n	80057c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d07e      	beq.n	80057c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	2101      	movs	r1, #1
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	6979      	ldr	r1, [r7, #20]
 80056e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e6:	4313      	orrs	r3, r2
 80056e8:	634b      	str	r3, [r1, #52]	; 0x34
 80056ea:	e06d      	b.n	80057c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005706:	0cdb      	lsrs	r3, r3, #19
 8005708:	04db      	lsls	r3, r3, #19
 800570a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005726:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800572e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800575e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005776:	6939      	ldr	r1, [r7, #16]
 8005778:	0148      	lsls	r0, r1, #5
 800577a:	6979      	ldr	r1, [r7, #20]
 800577c:	4401      	add	r1, r0
 800577e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005782:	4313      	orrs	r3, r2
 8005784:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d10d      	bne.n	80057a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	68d9      	ldr	r1, [r3, #12]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	460a      	mov	r2, r1
 80057a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b089      	sub	sp, #36	; 0x24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	4611      	mov	r1, r2
 80057e2:	461a      	mov	r2, r3
 80057e4:	460b      	mov	r3, r1
 80057e6:	71fb      	strb	r3, [r7, #7]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80057f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d11a      	bne.n	8005832 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057fc:	88bb      	ldrh	r3, [r7, #4]
 80057fe:	3303      	adds	r3, #3
 8005800:	089b      	lsrs	r3, r3, #2
 8005802:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e00f      	b.n	800582a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	031a      	lsls	r2, r3, #12
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	4413      	add	r3, r2
 8005812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005816:	461a      	mov	r2, r3
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3304      	adds	r3, #4
 8005822:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	3301      	adds	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	429a      	cmp	r2, r3
 8005830:	d3eb      	bcc.n	800580a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3724      	adds	r7, #36	; 0x24
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	3303      	adds	r3, #3
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e00b      	b.n	800587c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3304      	adds	r3, #4
 8005874:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3301      	adds	r3, #1
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	429a      	cmp	r2, r3
 8005882:	d3ef      	bcc.n	8005864 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005884:	69fb      	ldr	r3, [r7, #28]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3724      	adds	r7, #36	; 0x24
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d12c      	bne.n	8005908 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	db12      	blt.n	80058e6 <USB_EPSetStall+0x54>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00f      	beq.n	80058e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	e02b      	b.n	8005960 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	db12      	blt.n	8005940 <USB_EPSetStall+0xae>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800593e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800595e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d128      	bne.n	80059dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	78db      	ldrb	r3, [r3, #3]
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d003      	beq.n	80059ba <USB_EPClearStall+0x4c>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	78db      	ldrb	r3, [r3, #3]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d138      	bne.n	8005a2c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e027      	b.n	8005a2c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d003      	beq.n	8005a0c <USB_EPClearStall+0x9e>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	78db      	ldrb	r3, [r3, #3]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d10f      	bne.n	8005a2c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	460b      	mov	r3, r1
 8005a44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a5c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a74:	4313      	orrs	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005aa0:	f023 0303 	bic.w	r3, r3, #3
 8005aa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab4:	f023 0302 	bic.w	r3, r3, #2
 8005ab8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005af6:	f043 0302 	orr.w	r3, r3, #2
 8005afa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b22:	68fb      	ldr	r3, [r7, #12]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4013      	ands	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	0c1b      	lsrs	r3, r3, #16
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	4013      	ands	r3, r2
 8005b86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	b29b      	uxth	r3, r3
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c22:	68bb      	ldr	r3, [r7, #8]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	333c      	adds	r3, #60	; 0x3c
 8005caa:	3304      	adds	r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <USB_EP0_OutStart+0xb8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d90a      	bls.n	8005cce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc8:	d101      	bne.n	8005cce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e037      	b.n	8005d3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfc:	f043 0318 	orr.w	r3, r3, #24
 8005d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10f      	bne.n	8005d3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	4f54300a 	.word	0x4f54300a

08005d50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a13      	ldr	r2, [pc, #76]	; (8005db4 <USB_CoreReset+0x64>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e01b      	b.n	8005da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	daf2      	bge.n	8005d5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f043 0201 	orr.w	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <USB_CoreReset+0x64>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d0f0      	beq.n	8005d86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	00030d40 	.word	0x00030d40

08005db8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005dc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005dc8:	f002 f93c 	bl	8008044 <malloc>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d105      	bne.n	8005de2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005dde:	2302      	movs	r3, #2
 8005de0:	e066      	b.n	8005eb0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7c1b      	ldrb	r3, [r3, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d119      	bne.n	8005e26 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005df6:	2202      	movs	r2, #2
 8005df8:	2181      	movs	r1, #129	; 0x81
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 ffa9 	bl	8007d52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 ff9f 	bl	8007d52 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2210      	movs	r2, #16
 8005e20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005e24:	e016      	b.n	8005e54 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e26:	2340      	movs	r3, #64	; 0x40
 8005e28:	2202      	movs	r2, #2
 8005e2a:	2181      	movs	r1, #129	; 0x81
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 ff90 	bl	8007d52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 ff87 	bl	8007d52 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2210      	movs	r2, #16
 8005e50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e54:	2308      	movs	r3, #8
 8005e56:	2203      	movs	r2, #3
 8005e58:	2182      	movs	r1, #130	; 0x82
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 ff79 	bl	8007d52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7c1b      	ldrb	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d109      	bne.n	8005e9e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e94:	2101      	movs	r1, #1
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f002 f84a 	bl	8007f30 <USBD_LL_PrepareReceive>
 8005e9c:	e007      	b.n	8005eae <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f002 f841 	bl	8007f30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ec8:	2181      	movs	r1, #129	; 0x81
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 ff67 	bl	8007d9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 ff60 	bl	8007d9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ee6:	2182      	movs	r1, #130	; 0x82
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f001 ff58 	bl	8007d9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00e      	beq.n	8005f26 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f002 f89b 	bl	8008054 <free>
    pdev->pClassData = NULL;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d03a      	beq.n	8005fd0 <USBD_CDC_Setup+0xa0>
 8005f5a:	2b20      	cmp	r3, #32
 8005f5c:	f040 8097 	bne.w	800608e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	88db      	ldrh	r3, [r3, #6]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d029      	beq.n	8005fbc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	b25b      	sxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	da11      	bge.n	8005f96 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005f7e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	88d2      	ldrh	r2, [r2, #6]
 8005f84:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f86:	6939      	ldr	r1, [r7, #16]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	88db      	ldrh	r3, [r3, #6]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 faac 	bl	80074ec <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005f94:	e082      	b.n	800609c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	785a      	ldrb	r2, [r3, #1]
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	88db      	ldrh	r3, [r3, #6]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005fac:	6939      	ldr	r1, [r7, #16]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	88db      	ldrh	r3, [r3, #6]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 fac5 	bl	8007544 <USBD_CtlPrepareRx>
    break;
 8005fba:	e06f      	b.n	800609c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	7850      	ldrb	r0, [r2, #1]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	4798      	blx	r3
    break;
 8005fce:	e065      	b.n	800609c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b0b      	cmp	r3, #11
 8005fd6:	d84f      	bhi.n	8006078 <USBD_CDC_Setup+0x148>
 8005fd8:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <USBD_CDC_Setup+0xb0>)
 8005fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fde:	bf00      	nop
 8005fe0:	08006011 	.word	0x08006011
 8005fe4:	08006087 	.word	0x08006087
 8005fe8:	08006079 	.word	0x08006079
 8005fec:	08006079 	.word	0x08006079
 8005ff0:	08006079 	.word	0x08006079
 8005ff4:	08006079 	.word	0x08006079
 8005ff8:	08006079 	.word	0x08006079
 8005ffc:	08006079 	.word	0x08006079
 8006000:	08006079 	.word	0x08006079
 8006004:	08006079 	.word	0x08006079
 8006008:	08006039 	.word	0x08006039
 800600c:	08006061 	.word	0x08006061
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006016:	2b03      	cmp	r3, #3
 8006018:	d107      	bne.n	800602a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800601a:	f107 030c 	add.w	r3, r7, #12
 800601e:	2202      	movs	r2, #2
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fa62 	bl	80074ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006028:	e030      	b.n	800608c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 f9ec 	bl	800740a <USBD_CtlError>
        ret = USBD_FAIL;
 8006032:	2303      	movs	r3, #3
 8006034:	75fb      	strb	r3, [r7, #23]
      break;
 8006036:	e029      	b.n	800608c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800603e:	2b03      	cmp	r3, #3
 8006040:	d107      	bne.n	8006052 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006042:	f107 030f 	add.w	r3, r7, #15
 8006046:	2201      	movs	r2, #1
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f001 fa4e 	bl	80074ec <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006050:	e01c      	b.n	800608c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 f9d8 	bl	800740a <USBD_CtlError>
        ret = USBD_FAIL;
 800605a:	2303      	movs	r3, #3
 800605c:	75fb      	strb	r3, [r7, #23]
      break;
 800605e:	e015      	b.n	800608c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006066:	2b03      	cmp	r3, #3
 8006068:	d00f      	beq.n	800608a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 f9cc 	bl	800740a <USBD_CtlError>
        ret = USBD_FAIL;
 8006072:	2303      	movs	r3, #3
 8006074:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006076:	e008      	b.n	800608a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 f9c5 	bl	800740a <USBD_CtlError>
      ret = USBD_FAIL;
 8006080:	2303      	movs	r3, #3
 8006082:	75fb      	strb	r3, [r7, #23]
      break;
 8006084:	e002      	b.n	800608c <USBD_CDC_Setup+0x15c>
      break;
 8006086:	bf00      	nop
 8006088:	e008      	b.n	800609c <USBD_CDC_Setup+0x16c>
      break;
 800608a:	bf00      	nop
    }
    break;
 800608c:	e006      	b.n	800609c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 f9ba 	bl	800740a <USBD_CtlError>
    ret = USBD_FAIL;
 8006096:	2303      	movs	r3, #3
 8006098:	75fb      	strb	r3, [r7, #23]
    break;
 800609a:	bf00      	nop
  }

  return (uint8_t)ret;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop

080060a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e049      	b.n	800615e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060d2:	78fa      	ldrb	r2, [r7, #3]
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	3318      	adds	r3, #24
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d029      	beq.n	800613c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	3318      	adds	r3, #24
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	78f9      	ldrb	r1, [r7, #3]
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	460b      	mov	r3, r1
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	1a5b      	subs	r3, r3, r1
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4403      	add	r3, r0
 8006108:	3344      	adds	r3, #68	; 0x44
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006110:	fb03 f301 	mul.w	r3, r3, r1
 8006114:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006116:	2b00      	cmp	r3, #0
 8006118:	d110      	bne.n	800613c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	3318      	adds	r3, #24
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800612e:	78f9      	ldrb	r1, [r7, #3]
 8006130:	2300      	movs	r3, #0
 8006132:	2200      	movs	r2, #0
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 feda 	bl	8007eee <USBD_LL_Transmit>
 800613a:	e00f      	b.n	800615c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006178:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	e015      	b.n	80061b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fef0 	bl	8007f72 <USBD_LL_GetRxDataSize>
 8006192:	4602      	mov	r2, r0
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061ae:	4611      	mov	r1, r2
 80061b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d015      	beq.n	8006202 <USBD_CDC_EP0_RxReady+0x46>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061dc:	2bff      	cmp	r3, #255	; 0xff
 80061de:	d010      	beq.n	8006202 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80061ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061f6:	b292      	uxth	r2, r2
 80061f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	22ff      	movs	r2, #255	; 0xff
 80061fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2243      	movs	r2, #67	; 0x43
 8006218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800621a:	4b03      	ldr	r3, [pc, #12]	; (8006228 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000094 	.word	0x20000094

0800622c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2243      	movs	r2, #67	; 0x43
 8006238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	20000050 	.word	0x20000050

0800624c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2243      	movs	r2, #67	; 0x43
 8006258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800625a:	4b03      	ldr	r3, [pc, #12]	; (8006268 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	200000d8 	.word	0x200000d8

0800626c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	220a      	movs	r2, #10
 8006278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800627a:	4b03      	ldr	r3, [pc, #12]	; (8006288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	2000000c 	.word	0x2000000c

0800628c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	e004      	b.n	80062aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062f8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800631e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800632e:	2303      	movs	r3, #3
 8006330:	e01a      	b.n	8006368 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006338:	2b00      	cmp	r3, #0
 800633a:	d114      	bne.n	8006366 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2201      	movs	r2, #1
 8006340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800635a:	2181      	movs	r1, #129	; 0x81
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 fdc6 	bl	8007eee <USBD_LL_Transmit>

    ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800638a:	2303      	movs	r3, #3
 800638c:	e016      	b.n	80063bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7c1b      	ldrb	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800639c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a0:	2101      	movs	r1, #1
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fdc4 	bl	8007f30 <USBD_LL_PrepareReceive>
 80063a8:	e007      	b.n	80063ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063b0:	2340      	movs	r3, #64	; 0x40
 80063b2:	2101      	movs	r1, #1
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fdbb 	bl	8007f30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063d8:	2303      	movs	r3, #3
 80063da:	e025      	b.n	8006428 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	79fa      	ldrb	r2, [r7, #7]
 800641a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f001 fc31 	bl	8007c84 <USBD_LL_Init>
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006444:	2303      	movs	r3, #3
 8006446:	e010      	b.n	800646a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f107 020e 	add.w	r2, r7, #14
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	4602      	mov	r2, r0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fc4e 	bl	8007d1c <USBD_LL_Start>
 8006480:	4603      	mov	r3, r0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	78fa      	ldrb	r2, [r7, #3]
 80064c4:	4611      	mov	r1, r2
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d007      	beq.n	80064fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	78fa      	ldrb	r2, [r7, #3]
 80064f8:	4611      	mov	r1, r2
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
  }

  return USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 ff3b 	bl	8007396 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800652e:	461a      	mov	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	2b02      	cmp	r3, #2
 8006542:	d01a      	beq.n	800657a <USBD_LL_SetupStage+0x72>
 8006544:	2b02      	cmp	r3, #2
 8006546:	d822      	bhi.n	800658e <USBD_LL_SetupStage+0x86>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <USBD_LL_SetupStage+0x4a>
 800654c:	2b01      	cmp	r3, #1
 800654e:	d00a      	beq.n	8006566 <USBD_LL_SetupStage+0x5e>
 8006550:	e01d      	b.n	800658e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa18 	bl	8006990 <USBD_StdDevReq>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
      break;
 8006564:	e020      	b.n	80065a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa7c 	bl	8006a6c <USBD_StdItfReq>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
      break;
 8006578:	e016      	b.n	80065a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 faba 	bl	8006afc <USBD_StdEPReq>
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]
      break;
 800658c:	e00c      	b.n	80065a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006594:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fc1d 	bl	8007ddc <USBD_LL_StallEP>
 80065a2:	4603      	mov	r3, r0
 80065a4:	73fb      	strb	r3, [r7, #15]
      break;
 80065a6:	bf00      	nop
  }

  return ret;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	460b      	mov	r3, r1
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d137      	bne.n	8006636 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d14a      	bne.n	800666e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d913      	bls.n	800660c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	1ad2      	subs	r2, r2, r3
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	4293      	cmp	r3, r2
 80065fc:	bf28      	it	cs
 80065fe:	4613      	movcs	r3, r2
 8006600:	461a      	mov	r2, r3
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 ffba 	bl	800757e <USBD_CtlContinueRx>
 800660a:	e030      	b.n	800666e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800661e:	2b03      	cmp	r3, #3
 8006620:	d105      	bne.n	800662e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 ffb6 	bl	80075a0 <USBD_CtlSendStatus>
 8006634:	e01b      	b.n	800666e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d013      	beq.n	800666a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006648:	2b03      	cmp	r3, #3
 800664a:	d10e      	bne.n	800666a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	7afa      	ldrb	r2, [r7, #11]
 8006656:	4611      	mov	r1, r2
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	4798      	blx	r3
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	e002      	b.n	8006670 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800666a:	2303      	movs	r3, #3
 800666c:	e000      	b.n	8006670 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	460b      	mov	r3, r1
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d16a      	bne.n	8006762 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3314      	adds	r3, #20
 8006690:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006698:	2b02      	cmp	r3, #2
 800669a:	d155      	bne.n	8006748 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d914      	bls.n	80066d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	1ad2      	subs	r2, r2, r3
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	461a      	mov	r2, r3
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 ff2f 	bl	8007522 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066c4:	2300      	movs	r3, #0
 80066c6:	2200      	movs	r2, #0
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f001 fc30 	bl	8007f30 <USBD_LL_PrepareReceive>
 80066d0:	e03a      	b.n	8006748 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d11c      	bne.n	8006718 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d316      	bcc.n	8006718 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d20f      	bcs.n	8006718 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066f8:	2200      	movs	r2, #0
 80066fa:	2100      	movs	r1, #0
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 ff10 	bl	8007522 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800670a:	2300      	movs	r3, #0
 800670c:	2200      	movs	r2, #0
 800670e:	2100      	movs	r1, #0
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f001 fc0d 	bl	8007f30 <USBD_LL_PrepareReceive>
 8006716:	e017      	b.n	8006748 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800672a:	2b03      	cmp	r3, #3
 800672c:	d105      	bne.n	800673a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800673a:	2180      	movs	r1, #128	; 0x80
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 fb4d 	bl	8007ddc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 ff3f 	bl	80075c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d123      	bne.n	800679a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fe99 	bl	800648a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006760:	e01b      	b.n	800679a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d013      	beq.n	8006796 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006774:	2b03      	cmp	r3, #3
 8006776:	d10e      	bne.n	8006796 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	7afa      	ldrb	r2, [r7, #11]
 8006782:	4611      	mov	r1, r2
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	4798      	blx	r3
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	e002      	b.n	800679c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006796:	2303      	movs	r3, #3
 8006798:	e000      	b.n	800679c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6852      	ldr	r2, [r2, #4]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	4611      	mov	r1, r2
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	2200      	movs	r2, #0
 80067ec:	2100      	movs	r1, #0
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 faaf 	bl	8007d52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2240      	movs	r2, #64	; 0x40
 8006800:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006804:	2340      	movs	r3, #64	; 0x40
 8006806:	2200      	movs	r2, #0
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 faa1 	bl	8007d52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2240      	movs	r2, #64	; 0x40
 800681a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2204      	movs	r2, #4
 800685e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687e:	2b04      	cmp	r3, #4
 8006880:	d105      	bne.n	800688e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d10b      	bne.n	80068c6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b083      	sub	sp, #12
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d009      	beq.n	8006948 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6852      	ldr	r2, [r2, #4]
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	4611      	mov	r1, r2
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	4798      	blx	r3
  }

  return USBD_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006952:	b480      	push	{r7}
 8006954:	b087      	sub	sp, #28
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	3301      	adds	r3, #1
 8006968:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006970:	8a3b      	ldrh	r3, [r7, #16]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	b21a      	sxth	r2, r3
 8006976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800697a:	4313      	orrs	r3, r2
 800697c:	b21b      	sxth	r3, r3
 800697e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006980:	89fb      	ldrh	r3, [r7, #14]
}
 8006982:	4618      	mov	r0, r3
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069a6:	2b40      	cmp	r3, #64	; 0x40
 80069a8:	d005      	beq.n	80069b6 <USBD_StdDevReq+0x26>
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d853      	bhi.n	8006a56 <USBD_StdDevReq+0xc6>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <USBD_StdDevReq+0x3a>
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d14f      	bne.n	8006a56 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
    break;
 80069c8:	e04a      	b.n	8006a60 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	2b09      	cmp	r3, #9
 80069d0:	d83b      	bhi.n	8006a4a <USBD_StdDevReq+0xba>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <USBD_StdDevReq+0x48>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	08006a41 	.word	0x08006a41
 80069e0:	08006a4b 	.word	0x08006a4b
 80069e4:	08006a37 	.word	0x08006a37
 80069e8:	08006a4b 	.word	0x08006a4b
 80069ec:	08006a0b 	.word	0x08006a0b
 80069f0:	08006a01 	.word	0x08006a01
 80069f4:	08006a4b 	.word	0x08006a4b
 80069f8:	08006a23 	.word	0x08006a23
 80069fc:	08006a15 	.word	0x08006a15
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9d8 	bl	8006db8 <USBD_GetDescriptor>
      break;
 8006a08:	e024      	b.n	8006a54 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fb3d 	bl	800708c <USBD_SetAddress>
      break;
 8006a12:	e01f      	b.n	8006a54 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fb7c 	bl	8007114 <USBD_SetConfig>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a20:	e018      	b.n	8006a54 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fc19 	bl	800725c <USBD_GetConfig>
      break;
 8006a2a:	e013      	b.n	8006a54 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fc49 	bl	80072c6 <USBD_GetStatus>
      break;
 8006a34:	e00e      	b.n	8006a54 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fc77 	bl	800732c <USBD_SetFeature>
      break;
 8006a3e:	e009      	b.n	8006a54 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fc86 	bl	8007354 <USBD_ClrFeature>
      break;
 8006a48:	e004      	b.n	8006a54 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fcdc 	bl	800740a <USBD_CtlError>
      break;
 8006a52:	bf00      	nop
    }
    break;
 8006a54:	e004      	b.n	8006a60 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fcd6 	bl	800740a <USBD_CtlError>
    break;
 8006a5e:	bf00      	nop
  }

  return ret;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop

08006a6c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a82:	2b40      	cmp	r3, #64	; 0x40
 8006a84:	d005      	beq.n	8006a92 <USBD_StdItfReq+0x26>
 8006a86:	2b40      	cmp	r3, #64	; 0x40
 8006a88:	d82e      	bhi.n	8006ae8 <USBD_StdItfReq+0x7c>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <USBD_StdItfReq+0x26>
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d12a      	bne.n	8006ae8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d81d      	bhi.n	8006ada <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	889b      	ldrh	r3, [r3, #4]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d813      	bhi.n	8006ad0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d110      	bne.n	8006ae4 <USBD_StdItfReq+0x78>
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fd69 	bl	80075a0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006ace:	e009      	b.n	8006ae4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fc99 	bl	800740a <USBD_CtlError>
      break;
 8006ad8:	e004      	b.n	8006ae4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fc94 	bl	800740a <USBD_CtlError>
      break;
 8006ae2:	e000      	b.n	8006ae6 <USBD_StdItfReq+0x7a>
      break;
 8006ae4:	bf00      	nop
    }
    break;
 8006ae6:	e004      	b.n	8006af2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fc8d 	bl	800740a <USBD_CtlError>
    break;
 8006af0:	bf00      	nop
  }

  return ret;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	889b      	ldrh	r3, [r3, #4]
 8006b0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d007      	beq.n	8006b2c <USBD_StdEPReq+0x30>
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	f200 8140 	bhi.w	8006da2 <USBD_StdEPReq+0x2a6>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00c      	beq.n	8006b40 <USBD_StdEPReq+0x44>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	f040 813b 	bne.w	8006da2 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b3e:	e135      	b.n	8006dac <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d007      	beq.n	8006b58 <USBD_StdEPReq+0x5c>
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	f300 8124 	bgt.w	8006d96 <USBD_StdEPReq+0x29a>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d07b      	beq.n	8006c4a <USBD_StdEPReq+0x14e>
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d03b      	beq.n	8006bce <USBD_StdEPReq+0xd2>
 8006b56:	e11e      	b.n	8006d96 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d002      	beq.n	8006b68 <USBD_StdEPReq+0x6c>
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d016      	beq.n	8006b94 <USBD_StdEPReq+0x98>
 8006b66:	e02c      	b.n	8006bc2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <USBD_StdEPReq+0x8e>
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d00a      	beq.n	8006b8a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f001 f92f 	bl	8007ddc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f92b 	bl	8007ddc <USBD_LL_StallEP>
 8006b86:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b88:	e020      	b.n	8006bcc <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc3c 	bl	800740a <USBD_CtlError>
        break;
 8006b92:	e01b      	b.n	8006bcc <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	885b      	ldrh	r3, [r3, #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10e      	bne.n	8006bba <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <USBD_StdEPReq+0xbe>
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d008      	beq.n	8006bba <USBD_StdEPReq+0xbe>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f911 	bl	8007ddc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fcf0 	bl	80075a0 <USBD_CtlSendStatus>

        break;
 8006bc0:	e004      	b.n	8006bcc <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fc20 	bl	800740a <USBD_CtlError>
        break;
 8006bca:	bf00      	nop
      }
      break;
 8006bcc:	e0e8      	b.n	8006da0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d002      	beq.n	8006bde <USBD_StdEPReq+0xe2>
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d016      	beq.n	8006c0a <USBD_StdEPReq+0x10e>
 8006bdc:	e02e      	b.n	8006c3c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00d      	beq.n	8006c00 <USBD_StdEPReq+0x104>
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d00a      	beq.n	8006c00 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 f8f4 	bl	8007ddc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 f8f0 	bl	8007ddc <USBD_LL_StallEP>
 8006bfc:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bfe:	e023      	b.n	8006c48 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fc01 	bl	800740a <USBD_CtlError>
        break;
 8006c08:	e01e      	b.n	8006c48 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	885b      	ldrh	r3, [r3, #2]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d119      	bne.n	8006c46 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f8fa 	bl	8007e1a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fcba 	bl	80075a0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
        }
        break;
 8006c3a:	e004      	b.n	8006c46 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fbe3 	bl	800740a <USBD_CtlError>
        break;
 8006c44:	e000      	b.n	8006c48 <USBD_StdEPReq+0x14c>
        break;
 8006c46:	bf00      	nop
      }
      break;
 8006c48:	e0aa      	b.n	8006da0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d002      	beq.n	8006c5a <USBD_StdEPReq+0x15e>
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d032      	beq.n	8006cbe <USBD_StdEPReq+0x1c2>
 8006c58:	e097      	b.n	8006d8a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <USBD_StdEPReq+0x174>
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d004      	beq.n	8006c70 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fbce 	bl	800740a <USBD_CtlError>
          break;
 8006c6e:	e091      	b.n	8006d94 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da0b      	bge.n	8006c90 <USBD_StdEPReq+0x194>
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	3310      	adds	r3, #16
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	e00b      	b.n	8006ca8 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fc18 	bl	80074ec <USBD_CtlSendData>
        break;
 8006cbc:	e06a      	b.n	8006d94 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	da11      	bge.n	8006cea <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	f003 020f 	and.w	r2, r3, #15
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	3324      	adds	r3, #36	; 0x24
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d117      	bne.n	8006d10 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fb91 	bl	800740a <USBD_CtlError>
            break;
 8006ce8:	e054      	b.n	8006d94 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fb7e 	bl	800740a <USBD_CtlError>
            break;
 8006d0e:	e041      	b.n	8006d94 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da0b      	bge.n	8006d30 <USBD_StdEPReq+0x234>
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	3310      	adds	r3, #16
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	e00b      	b.n	8006d48 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <USBD_StdEPReq+0x25a>
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b80      	cmp	r3, #128	; 0x80
 8006d54:	d103      	bne.n	8006d5e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e00e      	b.n	8006d7c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 f878 	bl	8007e58 <USBD_LL_IsStallEP>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	e002      	b.n	8006d7c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fbb2 	bl	80074ec <USBD_CtlSendData>
          break;
 8006d88:	e004      	b.n	8006d94 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fb3c 	bl	800740a <USBD_CtlError>
        break;
 8006d92:	bf00      	nop
      }
      break;
 8006d94:	e004      	b.n	8006da0 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fb36 	bl	800740a <USBD_CtlError>
      break;
 8006d9e:	bf00      	nop
    }
    break;
 8006da0:	e004      	b.n	8006dac <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fb30 	bl	800740a <USBD_CtlError>
    break;
 8006daa:	bf00      	nop
  }

  return ret;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	885b      	ldrh	r3, [r3, #2]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	2b06      	cmp	r3, #6
 8006dda:	f200 8128 	bhi.w	800702e <USBD_GetDescriptor+0x276>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <USBD_GetDescriptor+0x2c>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e01 	.word	0x08006e01
 8006de8:	08006e19 	.word	0x08006e19
 8006dec:	08006e59 	.word	0x08006e59
 8006df0:	0800702f 	.word	0x0800702f
 8006df4:	0800702f 	.word	0x0800702f
 8006df8:	08006fcf 	.word	0x08006fcf
 8006dfc:	08006ffb 	.word	0x08006ffb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	7c12      	ldrb	r2, [r2, #16]
 8006e0c:	f107 0108 	add.w	r1, r7, #8
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	60f8      	str	r0, [r7, #12]
    break;
 8006e16:	e112      	b.n	800703e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7c1b      	ldrb	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10d      	bne.n	8006e3c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	f107 0208 	add.w	r2, r7, #8
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	4798      	blx	r3
 8006e30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	2202      	movs	r2, #2
 8006e38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e3a:	e100      	b.n	800703e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	f107 0208 	add.w	r2, r7, #8
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3301      	adds	r3, #1
 8006e52:	2202      	movs	r2, #2
 8006e54:	701a      	strb	r2, [r3, #0]
    break;
 8006e56:	e0f2      	b.n	800703e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	885b      	ldrh	r3, [r3, #2]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b05      	cmp	r3, #5
 8006e60:	f200 80ac 	bhi.w	8006fbc <USBD_GetDescriptor+0x204>
 8006e64:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <USBD_GetDescriptor+0xb4>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006e85 	.word	0x08006e85
 8006e70:	08006eb9 	.word	0x08006eb9
 8006e74:	08006eed 	.word	0x08006eed
 8006e78:	08006f21 	.word	0x08006f21
 8006e7c:	08006f55 	.word	0x08006f55
 8006e80:	08006f89 	.word	0x08006f89
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ea6:	e091      	b.n	8006fcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 faad 	bl	800740a <USBD_CtlError>
        err++;
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	72fb      	strb	r3, [r7, #11]
      break;
 8006eb6:	e089      	b.n	8006fcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eda:	e077      	b.n	8006fcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa93 	bl	800740a <USBD_CtlError>
        err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
      break;
 8006eea:	e06f      	b.n	8006fcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f0e:	e05d      	b.n	8006fcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa79 	bl	800740a <USBD_CtlError>
        err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f1e:	e055      	b.n	8006fcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	7c12      	ldrb	r2, [r2, #16]
 8006f38:	f107 0108 	add.w	r1, r7, #8
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f42:	e043      	b.n	8006fcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa5f 	bl	800740a <USBD_CtlError>
        err++;
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	72fb      	strb	r3, [r7, #11]
      break;
 8006f52:	e03b      	b.n	8006fcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	7c12      	ldrb	r2, [r2, #16]
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f76:	e029      	b.n	8006fcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa45 	bl	800740a <USBD_CtlError>
        err++;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	3301      	adds	r3, #1
 8006f84:	72fb      	strb	r3, [r7, #11]
      break;
 8006f86:	e021      	b.n	8006fcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	7c12      	ldrb	r2, [r2, #16]
 8006fa0:	f107 0108 	add.w	r1, r7, #8
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4798      	blx	r3
 8006fa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006faa:	e00f      	b.n	8006fcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa2b 	bl	800740a <USBD_CtlError>
        err++;
 8006fb4:	7afb      	ldrb	r3, [r7, #11]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	72fb      	strb	r3, [r7, #11]
      break;
 8006fba:	e007      	b.n	8006fcc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa23 	bl	800740a <USBD_CtlError>
      err++;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006fca:	bf00      	nop
    }
    break;
 8006fcc:	e037      	b.n	800703e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7c1b      	ldrb	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d109      	bne.n	8006fea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fde:	f107 0208 	add.w	r2, r7, #8
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4798      	blx	r3
 8006fe6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006fe8:	e029      	b.n	800703e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fa0c 	bl	800740a <USBD_CtlError>
      err++;
 8006ff2:	7afb      	ldrb	r3, [r7, #11]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	72fb      	strb	r3, [r7, #11]
    break;
 8006ff8:	e021      	b.n	800703e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	7c1b      	ldrb	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10d      	bne.n	800701e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f107 0208 	add.w	r2, r7, #8
 800700e:	4610      	mov	r0, r2
 8007010:	4798      	blx	r3
 8007012:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3301      	adds	r3, #1
 8007018:	2207      	movs	r2, #7
 800701a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800701c:	e00f      	b.n	800703e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f9f2 	bl	800740a <USBD_CtlError>
      err++;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	3301      	adds	r3, #1
 800702a:	72fb      	strb	r3, [r7, #11]
    break;
 800702c:	e007      	b.n	800703e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9ea 	bl	800740a <USBD_CtlError>
    err++;
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	3301      	adds	r3, #1
 800703a:	72fb      	strb	r3, [r7, #11]
    break;
 800703c:	bf00      	nop
  }

  if (err != 0U)
 800703e:	7afb      	ldrb	r3, [r7, #11]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d11e      	bne.n	8007082 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	88db      	ldrh	r3, [r3, #6]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d016      	beq.n	800707a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800704c:	893b      	ldrh	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00e      	beq.n	8007070 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	88da      	ldrh	r2, [r3, #6]
 8007056:	893b      	ldrh	r3, [r7, #8]
 8007058:	4293      	cmp	r3, r2
 800705a:	bf28      	it	cs
 800705c:	4613      	movcs	r3, r2
 800705e:	b29b      	uxth	r3, r3
 8007060:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007062:	893b      	ldrh	r3, [r7, #8]
 8007064:	461a      	mov	r2, r3
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa3f 	bl	80074ec <USBD_CtlSendData>
 800706e:	e009      	b.n	8007084 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f9c9 	bl	800740a <USBD_CtlError>
 8007078:	e004      	b.n	8007084 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa90 	bl	80075a0 <USBD_CtlSendStatus>
 8007080:	e000      	b.n	8007084 <USBD_GetDescriptor+0x2cc>
    return;
 8007082:	bf00      	nop
    }
  }
}
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop

0800708c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	889b      	ldrh	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d130      	bne.n	8007100 <USBD_SetAddress+0x74>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	88db      	ldrh	r3, [r3, #6]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d12c      	bne.n	8007100 <USBD_SetAddress+0x74>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	2b7f      	cmp	r3, #127	; 0x7f
 80070ac:	d828      	bhi.n	8007100 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	885b      	ldrh	r3, [r3, #2]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d104      	bne.n	80070ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f99f 	bl	800740a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070cc:	e01d      	b.n	800710a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	7bfa      	ldrb	r2, [r7, #15]
 80070d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fee8 	bl	8007eb0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fa5d 	bl	80075a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f4:	e009      	b.n	800710a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	e004      	b.n	800710a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f981 	bl	800740a <USBD_CtlError>
  }
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	885b      	ldrh	r3, [r3, #2]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	4b4b      	ldr	r3, [pc, #300]	; (8007258 <USBD_SetConfig+0x144>)
 800712a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800712c:	4b4a      	ldr	r3, [pc, #296]	; (8007258 <USBD_SetConfig+0x144>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d905      	bls.n	8007140 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f967 	bl	800740a <USBD_CtlError>
    return USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	e087      	b.n	8007250 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007146:	2b02      	cmp	r3, #2
 8007148:	d002      	beq.n	8007150 <USBD_SetConfig+0x3c>
 800714a:	2b03      	cmp	r3, #3
 800714c:	d025      	beq.n	800719a <USBD_SetConfig+0x86>
 800714e:	e071      	b.n	8007234 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007150:	4b41      	ldr	r3, [pc, #260]	; (8007258 <USBD_SetConfig+0x144>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01c      	beq.n	8007192 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007158:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <USBD_SetConfig+0x144>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	461a      	mov	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007162:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <USBD_SetConfig+0x144>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	4619      	mov	r1, r3
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff f999 	bl	80064a0 <USBD_SetClassConfig>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f945 	bl	800740a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007180:	e065      	b.n	800724e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa0c 	bl	80075a0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2203      	movs	r2, #3
 800718c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007190:	e05d      	b.n	800724e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fa04 	bl	80075a0 <USBD_CtlSendStatus>
    break;
 8007198:	e059      	b.n	800724e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800719a:	4b2f      	ldr	r3, [pc, #188]	; (8007258 <USBD_SetConfig+0x144>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d112      	bne.n	80071c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2202      	movs	r2, #2
 80071a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80071aa:	4b2b      	ldr	r3, [pc, #172]	; (8007258 <USBD_SetConfig+0x144>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071b4:	4b28      	ldr	r3, [pc, #160]	; (8007258 <USBD_SetConfig+0x144>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff f98c 	bl	80064d8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f9ed 	bl	80075a0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80071c6:	e042      	b.n	800724e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80071c8:	4b23      	ldr	r3, [pc, #140]	; (8007258 <USBD_SetConfig+0x144>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d02a      	beq.n	800722c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff f97a 	bl	80064d8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80071e4:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <USBD_SetConfig+0x144>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <USBD_SetConfig+0x144>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff f953 	bl	80064a0 <USBD_SetClassConfig>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00f      	beq.n	8007224 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f8ff 	bl	800740a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff f95f 	bl	80064d8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007222:	e014      	b.n	800724e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9bb 	bl	80075a0 <USBD_CtlSendStatus>
    break;
 800722a:	e010      	b.n	800724e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f9b7 	bl	80075a0 <USBD_CtlSendStatus>
    break;
 8007232:	e00c      	b.n	800724e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f8e7 	bl	800740a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <USBD_SetConfig+0x144>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff f948 	bl	80064d8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007248:	2303      	movs	r3, #3
 800724a:	73fb      	strb	r3, [r7, #15]
    break;
 800724c:	bf00      	nop
  }

  return ret;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	200002a4 	.word	0x200002a4

0800725c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	88db      	ldrh	r3, [r3, #6]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d004      	beq.n	8007278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f8ca 	bl	800740a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007276:	e022      	b.n	80072be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727e:	2b02      	cmp	r3, #2
 8007280:	dc02      	bgt.n	8007288 <USBD_GetConfig+0x2c>
 8007282:	2b00      	cmp	r3, #0
 8007284:	dc03      	bgt.n	800728e <USBD_GetConfig+0x32>
 8007286:	e015      	b.n	80072b4 <USBD_GetConfig+0x58>
 8007288:	2b03      	cmp	r3, #3
 800728a:	d00b      	beq.n	80072a4 <USBD_GetConfig+0x48>
 800728c:	e012      	b.n	80072b4 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3308      	adds	r3, #8
 8007298:	2201      	movs	r2, #1
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f925 	bl	80074ec <USBD_CtlSendData>
      break;
 80072a2:	e00c      	b.n	80072be <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	2201      	movs	r2, #1
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f91d 	bl	80074ec <USBD_CtlSendData>
      break;
 80072b2:	e004      	b.n	80072be <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8a7 	bl	800740a <USBD_CtlError>
      break;
 80072bc:	bf00      	nop
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d6:	3b01      	subs	r3, #1
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d81e      	bhi.n	800731a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	88db      	ldrh	r3, [r3, #6]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d004      	beq.n	80072ee <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f88f 	bl	800740a <USBD_CtlError>
      break;
 80072ec:	e01a      	b.n	8007324 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f043 0202 	orr.w	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	330c      	adds	r3, #12
 800730e:	2202      	movs	r2, #2
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f8ea 	bl	80074ec <USBD_CtlSendData>
    break;
 8007318:	e004      	b.n	8007324 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f874 	bl	800740a <USBD_CtlError>
    break;
 8007322:	bf00      	nop
  }
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d106      	bne.n	800734c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f92a 	bl	80075a0 <USBD_CtlSendStatus>
  }
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007364:	3b01      	subs	r3, #1
 8007366:	2b02      	cmp	r3, #2
 8007368:	d80b      	bhi.n	8007382 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	885b      	ldrh	r3, [r3, #2]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10c      	bne.n	800738c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f910 	bl	80075a0 <USBD_CtlSendStatus>
      }
      break;
 8007380:	e004      	b.n	800738c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f840 	bl	800740a <USBD_CtlError>
      break;
 800738a:	e000      	b.n	800738e <USBD_ClrFeature+0x3a>
      break;
 800738c:	bf00      	nop
  }
}
 800738e:	bf00      	nop
 8007390:	3708      	adds	r7, #8
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	781a      	ldrb	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3301      	adds	r3, #1
 80073be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f7ff fac6 	bl	8006952 <SWAPBYTE>
 80073c6:	4603      	mov	r3, r0
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff fab9 	bl	8006952 <SWAPBYTE>
 80073e0:	4603      	mov	r3, r0
 80073e2:	461a      	mov	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3301      	adds	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3301      	adds	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff faac 	bl	8006952 <SWAPBYTE>
 80073fa:	4603      	mov	r3, r0
 80073fc:	461a      	mov	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	80da      	strh	r2, [r3, #6]
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007414:	2180      	movs	r1, #128	; 0x80
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fce0 	bl	8007ddc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800741c:	2100      	movs	r1, #0
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fcdc 	bl	8007ddc <USBD_LL_StallEP>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d036      	beq.n	80074b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007446:	6938      	ldr	r0, [r7, #16]
 8007448:	f000 f836 	bl	80074b8 <USBD_GetLen>
 800744c:	4603      	mov	r3, r0
 800744e:	3301      	adds	r3, #1
 8007450:	b29b      	uxth	r3, r3
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	4413      	add	r3, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	701a      	strb	r2, [r3, #0]
  idx++;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	3301      	adds	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4413      	add	r3, r2
 8007472:	2203      	movs	r2, #3
 8007474:	701a      	strb	r2, [r3, #0]
  idx++;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	3301      	adds	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800747c:	e013      	b.n	80074a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	4413      	add	r3, r2
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	3301      	adds	r3, #1
 800748e:	613b      	str	r3, [r7, #16]
    idx++;
 8007490:	7dfb      	ldrb	r3, [r7, #23]
 8007492:	3301      	adds	r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	4413      	add	r3, r2
 800749c:	2200      	movs	r2, #0
 800749e:	701a      	strb	r2, [r3, #0]
    idx++;
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	3301      	adds	r3, #1
 80074a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e7      	bne.n	800747e <USBD_GetString+0x52>
 80074ae:	e000      	b.n	80074b2 <USBD_GetString+0x86>
    return;
 80074b0:	bf00      	nop
  }
}
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074c8:	e005      	b.n	80074d6 <USBD_GetLen+0x1e>
  {
    len++;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	3301      	adds	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	3301      	adds	r3, #1
 80074d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1f5      	bne.n	80074ca <USBD_GetLen+0x12>
  }

  return len;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	2100      	movs	r1, #0
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fceb 	bl	8007eee <USBD_LL_Transmit>

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	2100      	movs	r1, #0
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fcda 	bl	8007eee <USBD_LL_Transmit>

  return USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2203      	movs	r2, #3
 8007554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	2100      	movs	r1, #0
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 fcde 	bl	8007f30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	2100      	movs	r1, #0
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f000 fccd 	bl	8007f30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2204      	movs	r2, #4
 80075ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075b0:	2300      	movs	r3, #0
 80075b2:	2200      	movs	r2, #0
 80075b4:	2100      	movs	r1, #0
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fc99 	bl	8007eee <USBD_LL_Transmit>

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2205      	movs	r2, #5
 80075d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075d6:	2300      	movs	r3, #0
 80075d8:	2200      	movs	r2, #0
 80075da:	2100      	movs	r1, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fca7 	bl	8007f30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075f0:	2200      	movs	r2, #0
 80075f2:	4912      	ldr	r1, [pc, #72]	; (800763c <MX_USB_DEVICE_Init+0x50>)
 80075f4:	4812      	ldr	r0, [pc, #72]	; (8007640 <MX_USB_DEVICE_Init+0x54>)
 80075f6:	f7fe fee5 	bl	80063c4 <USBD_Init>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007600:	f7f9 fe32 	bl	8001268 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007604:	490f      	ldr	r1, [pc, #60]	; (8007644 <MX_USB_DEVICE_Init+0x58>)
 8007606:	480e      	ldr	r0, [pc, #56]	; (8007640 <MX_USB_DEVICE_Init+0x54>)
 8007608:	f7fe ff12 	bl	8006430 <USBD_RegisterClass>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007612:	f7f9 fe29 	bl	8001268 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007616:	490c      	ldr	r1, [pc, #48]	; (8007648 <MX_USB_DEVICE_Init+0x5c>)
 8007618:	4809      	ldr	r0, [pc, #36]	; (8007640 <MX_USB_DEVICE_Init+0x54>)
 800761a:	f7fe fe37 	bl	800628c <USBD_CDC_RegisterInterface>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007624:	f7f9 fe20 	bl	8001268 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007628:	4805      	ldr	r0, [pc, #20]	; (8007640 <MX_USB_DEVICE_Init+0x54>)
 800762a:	f7fe ff22 	bl	8006472 <USBD_Start>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007634:	f7f9 fe18 	bl	8001268 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007638:	bf00      	nop
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000130 	.word	0x20000130
 8007640:	2000036c 	.word	0x2000036c
 8007644:	20000018 	.word	0x20000018
 8007648:	2000011c 	.word	0x2000011c

0800764c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007650:	2200      	movs	r2, #0
 8007652:	4905      	ldr	r1, [pc, #20]	; (8007668 <CDC_Init_FS+0x1c>)
 8007654:	4805      	ldr	r0, [pc, #20]	; (800766c <CDC_Init_FS+0x20>)
 8007656:	f7fe fe2e 	bl	80062b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800765a:	4905      	ldr	r1, [pc, #20]	; (8007670 <CDC_Init_FS+0x24>)
 800765c:	4803      	ldr	r0, [pc, #12]	; (800766c <CDC_Init_FS+0x20>)
 800765e:	f7fe fe43 	bl	80062e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007662:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000e3c 	.word	0x20000e3c
 800766c:	2000036c 	.word	0x2000036c
 8007670:	2000063c 	.word	0x2000063c

08007674 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007678:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800767a:	4618      	mov	r0, r3
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
 8007690:	4613      	mov	r3, r2
 8007692:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	2b23      	cmp	r3, #35	; 0x23
 8007698:	d84a      	bhi.n	8007730 <CDC_Control_FS+0xac>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <CDC_Control_FS+0x1c>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	08007731 	.word	0x08007731
 80076a4:	08007731 	.word	0x08007731
 80076a8:	08007731 	.word	0x08007731
 80076ac:	08007731 	.word	0x08007731
 80076b0:	08007731 	.word	0x08007731
 80076b4:	08007731 	.word	0x08007731
 80076b8:	08007731 	.word	0x08007731
 80076bc:	08007731 	.word	0x08007731
 80076c0:	08007731 	.word	0x08007731
 80076c4:	08007731 	.word	0x08007731
 80076c8:	08007731 	.word	0x08007731
 80076cc:	08007731 	.word	0x08007731
 80076d0:	08007731 	.word	0x08007731
 80076d4:	08007731 	.word	0x08007731
 80076d8:	08007731 	.word	0x08007731
 80076dc:	08007731 	.word	0x08007731
 80076e0:	08007731 	.word	0x08007731
 80076e4:	08007731 	.word	0x08007731
 80076e8:	08007731 	.word	0x08007731
 80076ec:	08007731 	.word	0x08007731
 80076f0:	08007731 	.word	0x08007731
 80076f4:	08007731 	.word	0x08007731
 80076f8:	08007731 	.word	0x08007731
 80076fc:	08007731 	.word	0x08007731
 8007700:	08007731 	.word	0x08007731
 8007704:	08007731 	.word	0x08007731
 8007708:	08007731 	.word	0x08007731
 800770c:	08007731 	.word	0x08007731
 8007710:	08007731 	.word	0x08007731
 8007714:	08007731 	.word	0x08007731
 8007718:	08007731 	.word	0x08007731
 800771c:	08007731 	.word	0x08007731
 8007720:	08007731 	.word	0x08007731
 8007724:	08007731 	.word	0x08007731
 8007728:	08007731 	.word	0x08007731
 800772c:	08007731 	.word	0x08007731
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007730:	bf00      	nop
  }

  return (USBD_OK);
 8007732:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	4805      	ldr	r0, [pc, #20]	; (8007764 <CDC_Receive_FS+0x24>)
 800774e:	f7fe fdcb 	bl	80062e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007752:	4804      	ldr	r0, [pc, #16]	; (8007764 <CDC_Receive_FS+0x24>)
 8007754:	f7fe fe0c 	bl	8006370 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007758:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	2000036c 	.word	0x2000036c

08007768 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007778:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <CDC_Transmit_FS+0x48>)
 800777a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800777e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800778a:	2301      	movs	r3, #1
 800778c:	e00b      	b.n	80077a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800778e:	887b      	ldrh	r3, [r7, #2]
 8007790:	461a      	mov	r2, r3
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	4806      	ldr	r0, [pc, #24]	; (80077b0 <CDC_Transmit_FS+0x48>)
 8007796:	f7fe fd8e 	bl	80062b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800779a:	4805      	ldr	r0, [pc, #20]	; (80077b0 <CDC_Transmit_FS+0x48>)
 800779c:	f7fe fdb8 	bl	8006310 <USBD_CDC_TransmitPacket>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	2000036c 	.word	0x2000036c

080077b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	4613      	mov	r3, r2
 80077c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	6039      	str	r1, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2212      	movs	r2, #18
 80077e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077ea:	4b03      	ldr	r3, [pc, #12]	; (80077f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	2000014c 	.word	0x2000014c

080077fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	6039      	str	r1, [r7, #0]
 8007806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2204      	movs	r2, #4
 800780c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800780e:	4b03      	ldr	r3, [pc, #12]	; (800781c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	20000160 	.word	0x20000160

08007820 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d105      	bne.n	800783e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	4907      	ldr	r1, [pc, #28]	; (8007854 <USBD_FS_ProductStrDescriptor+0x34>)
 8007836:	4808      	ldr	r0, [pc, #32]	; (8007858 <USBD_FS_ProductStrDescriptor+0x38>)
 8007838:	f7ff fdf8 	bl	800742c <USBD_GetString>
 800783c:	e004      	b.n	8007848 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	4904      	ldr	r1, [pc, #16]	; (8007854 <USBD_FS_ProductStrDescriptor+0x34>)
 8007842:	4805      	ldr	r0, [pc, #20]	; (8007858 <USBD_FS_ProductStrDescriptor+0x38>)
 8007844:	f7ff fdf2 	bl	800742c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007848:	4b02      	ldr	r3, [pc, #8]	; (8007854 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	2000163c 	.word	0x2000163c
 8007858:	08008a70 	.word	0x08008a70

0800785c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	4904      	ldr	r1, [pc, #16]	; (800787c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800786c:	4804      	ldr	r0, [pc, #16]	; (8007880 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800786e:	f7ff fddd 	bl	800742c <USBD_GetString>
  return USBD_StrDesc;
 8007872:	4b02      	ldr	r3, [pc, #8]	; (800787c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	2000163c 	.word	0x2000163c
 8007880:	08008a84 	.word	0x08008a84

08007884 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	221a      	movs	r2, #26
 8007894:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007896:	f000 f843 	bl	8007920 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800789a:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000164 	.word	0x20000164

080078a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	6039      	str	r1, [r7, #0]
 80078b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4907      	ldr	r1, [pc, #28]	; (80078dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80078be:	4808      	ldr	r0, [pc, #32]	; (80078e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078c0:	f7ff fdb4 	bl	800742c <USBD_GetString>
 80078c4:	e004      	b.n	80078d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4904      	ldr	r1, [pc, #16]	; (80078dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80078ca:	4805      	ldr	r0, [pc, #20]	; (80078e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80078cc:	f7ff fdae 	bl	800742c <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d0:	4b02      	ldr	r3, [pc, #8]	; (80078dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	2000163c 	.word	0x2000163c
 80078e0:	08008a98 	.word	0x08008a98

080078e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4907      	ldr	r1, [pc, #28]	; (8007918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078fa:	4808      	ldr	r0, [pc, #32]	; (800791c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078fc:	f7ff fd96 	bl	800742c <USBD_GetString>
 8007900:	e004      	b.n	800790c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4904      	ldr	r1, [pc, #16]	; (8007918 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007906:	4805      	ldr	r0, [pc, #20]	; (800791c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007908:	f7ff fd90 	bl	800742c <USBD_GetString>
  }
  return USBD_StrDesc;
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	2000163c 	.word	0x2000163c
 800791c:	08008aa4 	.word	0x08008aa4

08007920 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <Get_SerialNum+0x44>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800792c:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <Get_SerialNum+0x48>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007932:	4b0e      	ldr	r3, [pc, #56]	; (800796c <Get_SerialNum+0x4c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007946:	2208      	movs	r2, #8
 8007948:	4909      	ldr	r1, [pc, #36]	; (8007970 <Get_SerialNum+0x50>)
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f814 	bl	8007978 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007950:	2204      	movs	r2, #4
 8007952:	4908      	ldr	r1, [pc, #32]	; (8007974 <Get_SerialNum+0x54>)
 8007954:	68b8      	ldr	r0, [r7, #8]
 8007956:	f000 f80f 	bl	8007978 <IntToUnicode>
  }
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	1fff7a10 	.word	0x1fff7a10
 8007968:	1fff7a14 	.word	0x1fff7a14
 800796c:	1fff7a18 	.word	0x1fff7a18
 8007970:	20000166 	.word	0x20000166
 8007974:	20000176 	.word	0x20000176

08007978 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800798a:	2300      	movs	r3, #0
 800798c:	75fb      	strb	r3, [r7, #23]
 800798e:	e027      	b.n	80079e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	0f1b      	lsrs	r3, r3, #28
 8007994:	2b09      	cmp	r3, #9
 8007996:	d80b      	bhi.n	80079b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	0f1b      	lsrs	r3, r3, #28
 800799c:	b2da      	uxtb	r2, r3
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4619      	mov	r1, r3
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	440b      	add	r3, r1
 80079a8:	3230      	adds	r2, #48	; 0x30
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e00a      	b.n	80079c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	0f1b      	lsrs	r3, r3, #28
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4619      	mov	r1, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	440b      	add	r3, r1
 80079c0:	3237      	adds	r2, #55	; 0x37
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	3301      	adds	r3, #1
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	4413      	add	r3, r2
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	3301      	adds	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
 80079e0:	7dfa      	ldrb	r2, [r7, #23]
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d3d3      	bcc.n	8007990 <IntToUnicode+0x18>
  }
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
	...

080079f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08a      	sub	sp, #40	; 0x28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a00:	f107 0314 	add.w	r3, r7, #20
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	605a      	str	r2, [r3, #4]
 8007a0a:	609a      	str	r2, [r3, #8]
 8007a0c:	60da      	str	r2, [r3, #12]
 8007a0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a18:	d13a      	bne.n	8007a90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	4b1e      	ldr	r3, [pc, #120]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	4a1d      	ldr	r2, [pc, #116]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a24:	f043 0301 	orr.w	r3, r3, #1
 8007a28:	6313      	str	r3, [r2, #48]	; 0x30
 8007a2a:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
 8007a34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a44:	2303      	movs	r3, #3
 8007a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a48:	230a      	movs	r3, #10
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a4c:	f107 0314 	add.w	r3, r7, #20
 8007a50:	4619      	mov	r1, r3
 8007a52:	4812      	ldr	r0, [pc, #72]	; (8007a9c <HAL_PCD_MspInit+0xa4>)
 8007a54:	f7f9 ff28 	bl	80018a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a58:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	4a0e      	ldr	r2, [pc, #56]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a62:	6353      	str	r3, [r2, #52]	; 0x34
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6c:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a72:	6453      	str	r3, [r2, #68]	; 0x44
 8007a74:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <HAL_PCD_MspInit+0xa0>)
 8007a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a80:	2200      	movs	r2, #0
 8007a82:	2100      	movs	r1, #0
 8007a84:	2043      	movs	r0, #67	; 0x43
 8007a86:	f7f9 feb6 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a8a:	2043      	movs	r0, #67	; 0x43
 8007a8c:	f7f9 fecf 	bl	800182e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a90:	bf00      	nop
 8007a92:	3728      	adds	r7, #40	; 0x28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	40020000 	.word	0x40020000

08007aa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7fe fd26 	bl	8006508 <USBD_LL_SetupStage>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	1a9b      	subs	r3, r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7fe fd60 	bl	80065b2 <USBD_LL_DataOutStage>
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b082      	sub	sp, #8
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	3348      	adds	r3, #72	; 0x48
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	4619      	mov	r1, r3
 8007b22:	f7fe fda9 	bl	8006678 <USBD_LL_DataInStage>
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fead 	bl	800689c <USBD_LL_SOF>
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b52:	2301      	movs	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d102      	bne.n	8007b64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
 8007b62:	e008      	b.n	8007b76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d102      	bne.n	8007b72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	e001      	b.n	8007b76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b72:	f7f9 fb79 	bl	8001268 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b7c:	7bfa      	ldrb	r2, [r7, #15]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fe50 	bl	8006826 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fe09 	bl	80067a4 <USBD_LL_Reset>
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fe4b 	bl	8006846 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bd0:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <HAL_PCD_SuspendCallback+0x48>)
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	4a03      	ldr	r2, [pc, #12]	; (8007be4 <HAL_PCD_SuspendCallback+0x48>)
 8007bd6:	f043 0306 	orr.w	r3, r3, #6
 8007bda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	e000ed00 	.word	0xe000ed00

08007be8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fe3a 	bl	8006870 <USBD_LL_Resume>
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe fe65 	bl	80068ea <USBD_LL_IsoOUTIncomplete>
}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c3a:	78fa      	ldrb	r2, [r7, #3]
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe fe46 	bl	80068d0 <USBD_LL_IsoINIncomplete>
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fe52 	bl	8006904 <USBD_LL_DevConnected>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fe4f 	bl	800691a <USBD_LL_DevDisconnected>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d13c      	bne.n	8007d0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c94:	4a20      	ldr	r2, [pc, #128]	; (8007d18 <USBD_LL_Init+0x94>)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ca0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007ca4:	4b1c      	ldr	r3, [pc, #112]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007caa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007cac:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cae:	2204      	movs	r2, #4
 8007cb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007cb2:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007cb8:	4b17      	ldr	r3, [pc, #92]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007cbe:	4b16      	ldr	r3, [pc, #88]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007cc4:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007cca:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007cd6:	4b10      	ldr	r3, [pc, #64]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cdc:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ce2:	480d      	ldr	r0, [pc, #52]	; (8007d18 <USBD_LL_Init+0x94>)
 8007ce4:	f7f9 ffbd 	bl	8001c62 <HAL_PCD_Init>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007cee:	f7f9 fabb 	bl	8001268 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cf2:	2180      	movs	r1, #128	; 0x80
 8007cf4:	4808      	ldr	r0, [pc, #32]	; (8007d18 <USBD_LL_Init+0x94>)
 8007cf6:	f7fb f91a 	bl	8002f2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cfa:	2240      	movs	r2, #64	; 0x40
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4806      	ldr	r0, [pc, #24]	; (8007d18 <USBD_LL_Init+0x94>)
 8007d00:	f7fb f8ce 	bl	8002ea0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d04:	2280      	movs	r2, #128	; 0x80
 8007d06:	2101      	movs	r1, #1
 8007d08:	4803      	ldr	r0, [pc, #12]	; (8007d18 <USBD_LL_Init+0x94>)
 8007d0a:	f7fb f8c9 	bl	8002ea0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	2000183c 	.word	0x2000183c

08007d1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fa f8b2 	bl	8001e9c <HAL_PCD_Start>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f92a 	bl	8007f98 <USBD_Get_USB_Status>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	4608      	mov	r0, r1
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4603      	mov	r3, r0
 8007d62:	70fb      	strb	r3, [r7, #3]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70bb      	strb	r3, [r7, #2]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d7a:	78bb      	ldrb	r3, [r7, #2]
 8007d7c:	883a      	ldrh	r2, [r7, #0]
 8007d7e:	78f9      	ldrb	r1, [r7, #3]
 8007d80:	f7fa fc96 	bl	80026b0 <HAL_PCD_EP_Open>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 f904 	bl	8007f98 <USBD_Get_USB_Status>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fa fcdf 	bl	8002780 <HAL_PCD_EP_Close>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 f8e5 	bl	8007f98 <USBD_Get_USB_Status>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fa fdb7 	bl	800296e <HAL_PCD_EP_SetStall>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f8c6 	bl	8007f98 <USBD_Get_USB_Status>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fa fdfc 	bl	8002a36 <HAL_PCD_EP_ClrStall>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 f8a7 	bl	8007f98 <USBD_Get_USB_Status>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da0b      	bge.n	8007e8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	440b      	add	r3, r1
 8007e86:	333e      	adds	r3, #62	; 0x3e
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	e00b      	b.n	8007ea4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	4613      	mov	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ea2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fa fbc9 	bl	8002666 <HAL_PCD_SetAddress>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 f85c 	bl	8007f98 <USBD_Get_USB_Status>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b086      	sub	sp, #24
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	460b      	mov	r3, r1
 8007efc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f0c:	7af9      	ldrb	r1, [r7, #11]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	f7fa fce2 	bl	80028da <HAL_PCD_EP_Transmit>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f83b 	bl	8007f98 <USBD_Get_USB_Status>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	607a      	str	r2, [r7, #4]
 8007f3a:	603b      	str	r3, [r7, #0]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f4e:	7af9      	ldrb	r1, [r7, #11]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	f7fa fc5e 	bl	8002814 <HAL_PCD_EP_Receive>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f81a 	bl	8007f98 <USBD_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f68:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fa fc8e 	bl	80028aa <HAL_PCD_EP_GetRxCount>
 8007f8e:	4603      	mov	r3, r0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d817      	bhi.n	8007fdc <USBD_Get_USB_Status+0x44>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <USBD_Get_USB_Status+0x1c>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fc5 	.word	0x08007fc5
 8007fb8:	08007fcb 	.word	0x08007fcb
 8007fbc:	08007fd1 	.word	0x08007fd1
 8007fc0:	08007fd7 	.word	0x08007fd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc8:	e00b      	b.n	8007fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fce:	e008      	b.n	8007fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fd4:	e005      	b.n	8007fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fda:	e002      	b.n	8007fe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	73fb      	strb	r3, [r7, #15]
    break;
 8007fe0:	bf00      	nop
  }
  return usb_status;
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <__errno>:
 8007ff0:	4b01      	ldr	r3, [pc, #4]	; (8007ff8 <__errno+0x8>)
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000180 	.word	0x20000180

08007ffc <__libc_init_array>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4d0d      	ldr	r5, [pc, #52]	; (8008034 <__libc_init_array+0x38>)
 8008000:	4c0d      	ldr	r4, [pc, #52]	; (8008038 <__libc_init_array+0x3c>)
 8008002:	1b64      	subs	r4, r4, r5
 8008004:	10a4      	asrs	r4, r4, #2
 8008006:	2600      	movs	r6, #0
 8008008:	42a6      	cmp	r6, r4
 800800a:	d109      	bne.n	8008020 <__libc_init_array+0x24>
 800800c:	4d0b      	ldr	r5, [pc, #44]	; (800803c <__libc_init_array+0x40>)
 800800e:	4c0c      	ldr	r4, [pc, #48]	; (8008040 <__libc_init_array+0x44>)
 8008010:	f000 fc6e 	bl	80088f0 <_init>
 8008014:	1b64      	subs	r4, r4, r5
 8008016:	10a4      	asrs	r4, r4, #2
 8008018:	2600      	movs	r6, #0
 800801a:	42a6      	cmp	r6, r4
 800801c:	d105      	bne.n	800802a <__libc_init_array+0x2e>
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	f855 3b04 	ldr.w	r3, [r5], #4
 8008024:	4798      	blx	r3
 8008026:	3601      	adds	r6, #1
 8008028:	e7ee      	b.n	8008008 <__libc_init_array+0xc>
 800802a:	f855 3b04 	ldr.w	r3, [r5], #4
 800802e:	4798      	blx	r3
 8008030:	3601      	adds	r6, #1
 8008032:	e7f2      	b.n	800801a <__libc_init_array+0x1e>
 8008034:	08008b08 	.word	0x08008b08
 8008038:	08008b08 	.word	0x08008b08
 800803c:	08008b08 	.word	0x08008b08
 8008040:	08008b0c 	.word	0x08008b0c

08008044 <malloc>:
 8008044:	4b02      	ldr	r3, [pc, #8]	; (8008050 <malloc+0xc>)
 8008046:	4601      	mov	r1, r0
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	f000 b863 	b.w	8008114 <_malloc_r>
 800804e:	bf00      	nop
 8008050:	20000180 	.word	0x20000180

08008054 <free>:
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <free+0xc>)
 8008056:	4601      	mov	r1, r0
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f000 b80b 	b.w	8008074 <_free_r>
 800805e:	bf00      	nop
 8008060:	20000180 	.word	0x20000180

08008064 <memset>:
 8008064:	4402      	add	r2, r0
 8008066:	4603      	mov	r3, r0
 8008068:	4293      	cmp	r3, r2
 800806a:	d100      	bne.n	800806e <memset+0xa>
 800806c:	4770      	bx	lr
 800806e:	f803 1b01 	strb.w	r1, [r3], #1
 8008072:	e7f9      	b.n	8008068 <memset+0x4>

08008074 <_free_r>:
 8008074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008076:	2900      	cmp	r1, #0
 8008078:	d048      	beq.n	800810c <_free_r+0x98>
 800807a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800807e:	9001      	str	r0, [sp, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f1a1 0404 	sub.w	r4, r1, #4
 8008086:	bfb8      	it	lt
 8008088:	18e4      	addlt	r4, r4, r3
 800808a:	f000 f8dd 	bl	8008248 <__malloc_lock>
 800808e:	4a20      	ldr	r2, [pc, #128]	; (8008110 <_free_r+0x9c>)
 8008090:	9801      	ldr	r0, [sp, #4]
 8008092:	6813      	ldr	r3, [r2, #0]
 8008094:	4615      	mov	r5, r2
 8008096:	b933      	cbnz	r3, 80080a6 <_free_r+0x32>
 8008098:	6063      	str	r3, [r4, #4]
 800809a:	6014      	str	r4, [r2, #0]
 800809c:	b003      	add	sp, #12
 800809e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a2:	f000 b8d7 	b.w	8008254 <__malloc_unlock>
 80080a6:	42a3      	cmp	r3, r4
 80080a8:	d90b      	bls.n	80080c2 <_free_r+0x4e>
 80080aa:	6821      	ldr	r1, [r4, #0]
 80080ac:	1862      	adds	r2, r4, r1
 80080ae:	4293      	cmp	r3, r2
 80080b0:	bf04      	itt	eq
 80080b2:	681a      	ldreq	r2, [r3, #0]
 80080b4:	685b      	ldreq	r3, [r3, #4]
 80080b6:	6063      	str	r3, [r4, #4]
 80080b8:	bf04      	itt	eq
 80080ba:	1852      	addeq	r2, r2, r1
 80080bc:	6022      	streq	r2, [r4, #0]
 80080be:	602c      	str	r4, [r5, #0]
 80080c0:	e7ec      	b.n	800809c <_free_r+0x28>
 80080c2:	461a      	mov	r2, r3
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	b10b      	cbz	r3, 80080cc <_free_r+0x58>
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	d9fa      	bls.n	80080c2 <_free_r+0x4e>
 80080cc:	6811      	ldr	r1, [r2, #0]
 80080ce:	1855      	adds	r5, r2, r1
 80080d0:	42a5      	cmp	r5, r4
 80080d2:	d10b      	bne.n	80080ec <_free_r+0x78>
 80080d4:	6824      	ldr	r4, [r4, #0]
 80080d6:	4421      	add	r1, r4
 80080d8:	1854      	adds	r4, r2, r1
 80080da:	42a3      	cmp	r3, r4
 80080dc:	6011      	str	r1, [r2, #0]
 80080de:	d1dd      	bne.n	800809c <_free_r+0x28>
 80080e0:	681c      	ldr	r4, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	6053      	str	r3, [r2, #4]
 80080e6:	4421      	add	r1, r4
 80080e8:	6011      	str	r1, [r2, #0]
 80080ea:	e7d7      	b.n	800809c <_free_r+0x28>
 80080ec:	d902      	bls.n	80080f4 <_free_r+0x80>
 80080ee:	230c      	movs	r3, #12
 80080f0:	6003      	str	r3, [r0, #0]
 80080f2:	e7d3      	b.n	800809c <_free_r+0x28>
 80080f4:	6825      	ldr	r5, [r4, #0]
 80080f6:	1961      	adds	r1, r4, r5
 80080f8:	428b      	cmp	r3, r1
 80080fa:	bf04      	itt	eq
 80080fc:	6819      	ldreq	r1, [r3, #0]
 80080fe:	685b      	ldreq	r3, [r3, #4]
 8008100:	6063      	str	r3, [r4, #4]
 8008102:	bf04      	itt	eq
 8008104:	1949      	addeq	r1, r1, r5
 8008106:	6021      	streq	r1, [r4, #0]
 8008108:	6054      	str	r4, [r2, #4]
 800810a:	e7c7      	b.n	800809c <_free_r+0x28>
 800810c:	b003      	add	sp, #12
 800810e:	bd30      	pop	{r4, r5, pc}
 8008110:	200002a8 	.word	0x200002a8

08008114 <_malloc_r>:
 8008114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008116:	1ccd      	adds	r5, r1, #3
 8008118:	f025 0503 	bic.w	r5, r5, #3
 800811c:	3508      	adds	r5, #8
 800811e:	2d0c      	cmp	r5, #12
 8008120:	bf38      	it	cc
 8008122:	250c      	movcc	r5, #12
 8008124:	2d00      	cmp	r5, #0
 8008126:	4606      	mov	r6, r0
 8008128:	db01      	blt.n	800812e <_malloc_r+0x1a>
 800812a:	42a9      	cmp	r1, r5
 800812c:	d903      	bls.n	8008136 <_malloc_r+0x22>
 800812e:	230c      	movs	r3, #12
 8008130:	6033      	str	r3, [r6, #0]
 8008132:	2000      	movs	r0, #0
 8008134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008136:	f000 f887 	bl	8008248 <__malloc_lock>
 800813a:	4921      	ldr	r1, [pc, #132]	; (80081c0 <_malloc_r+0xac>)
 800813c:	680a      	ldr	r2, [r1, #0]
 800813e:	4614      	mov	r4, r2
 8008140:	b99c      	cbnz	r4, 800816a <_malloc_r+0x56>
 8008142:	4f20      	ldr	r7, [pc, #128]	; (80081c4 <_malloc_r+0xb0>)
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	b923      	cbnz	r3, 8008152 <_malloc_r+0x3e>
 8008148:	4621      	mov	r1, r4
 800814a:	4630      	mov	r0, r6
 800814c:	f000 f83c 	bl	80081c8 <_sbrk_r>
 8008150:	6038      	str	r0, [r7, #0]
 8008152:	4629      	mov	r1, r5
 8008154:	4630      	mov	r0, r6
 8008156:	f000 f837 	bl	80081c8 <_sbrk_r>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d123      	bne.n	80081a6 <_malloc_r+0x92>
 800815e:	230c      	movs	r3, #12
 8008160:	6033      	str	r3, [r6, #0]
 8008162:	4630      	mov	r0, r6
 8008164:	f000 f876 	bl	8008254 <__malloc_unlock>
 8008168:	e7e3      	b.n	8008132 <_malloc_r+0x1e>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	1b5b      	subs	r3, r3, r5
 800816e:	d417      	bmi.n	80081a0 <_malloc_r+0x8c>
 8008170:	2b0b      	cmp	r3, #11
 8008172:	d903      	bls.n	800817c <_malloc_r+0x68>
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	441c      	add	r4, r3
 8008178:	6025      	str	r5, [r4, #0]
 800817a:	e004      	b.n	8008186 <_malloc_r+0x72>
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	42a2      	cmp	r2, r4
 8008180:	bf0c      	ite	eq
 8008182:	600b      	streq	r3, [r1, #0]
 8008184:	6053      	strne	r3, [r2, #4]
 8008186:	4630      	mov	r0, r6
 8008188:	f000 f864 	bl	8008254 <__malloc_unlock>
 800818c:	f104 000b 	add.w	r0, r4, #11
 8008190:	1d23      	adds	r3, r4, #4
 8008192:	f020 0007 	bic.w	r0, r0, #7
 8008196:	1ac2      	subs	r2, r0, r3
 8008198:	d0cc      	beq.n	8008134 <_malloc_r+0x20>
 800819a:	1a1b      	subs	r3, r3, r0
 800819c:	50a3      	str	r3, [r4, r2]
 800819e:	e7c9      	b.n	8008134 <_malloc_r+0x20>
 80081a0:	4622      	mov	r2, r4
 80081a2:	6864      	ldr	r4, [r4, #4]
 80081a4:	e7cc      	b.n	8008140 <_malloc_r+0x2c>
 80081a6:	1cc4      	adds	r4, r0, #3
 80081a8:	f024 0403 	bic.w	r4, r4, #3
 80081ac:	42a0      	cmp	r0, r4
 80081ae:	d0e3      	beq.n	8008178 <_malloc_r+0x64>
 80081b0:	1a21      	subs	r1, r4, r0
 80081b2:	4630      	mov	r0, r6
 80081b4:	f000 f808 	bl	80081c8 <_sbrk_r>
 80081b8:	3001      	adds	r0, #1
 80081ba:	d1dd      	bne.n	8008178 <_malloc_r+0x64>
 80081bc:	e7cf      	b.n	800815e <_malloc_r+0x4a>
 80081be:	bf00      	nop
 80081c0:	200002a8 	.word	0x200002a8
 80081c4:	200002ac 	.word	0x200002ac

080081c8 <_sbrk_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4d06      	ldr	r5, [pc, #24]	; (80081e4 <_sbrk_r+0x1c>)
 80081cc:	2300      	movs	r3, #0
 80081ce:	4604      	mov	r4, r0
 80081d0:	4608      	mov	r0, r1
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	f7f9 f928 	bl	8001428 <_sbrk>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d102      	bne.n	80081e2 <_sbrk_r+0x1a>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	b103      	cbz	r3, 80081e2 <_sbrk_r+0x1a>
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	20001c44 	.word	0x20001c44

080081e8 <siprintf>:
 80081e8:	b40e      	push	{r1, r2, r3}
 80081ea:	b500      	push	{lr}
 80081ec:	b09c      	sub	sp, #112	; 0x70
 80081ee:	ab1d      	add	r3, sp, #116	; 0x74
 80081f0:	9002      	str	r0, [sp, #8]
 80081f2:	9006      	str	r0, [sp, #24]
 80081f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081f8:	4809      	ldr	r0, [pc, #36]	; (8008220 <siprintf+0x38>)
 80081fa:	9107      	str	r1, [sp, #28]
 80081fc:	9104      	str	r1, [sp, #16]
 80081fe:	4909      	ldr	r1, [pc, #36]	; (8008224 <siprintf+0x3c>)
 8008200:	f853 2b04 	ldr.w	r2, [r3], #4
 8008204:	9105      	str	r1, [sp, #20]
 8008206:	6800      	ldr	r0, [r0, #0]
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	a902      	add	r1, sp, #8
 800820c:	f000 f884 	bl	8008318 <_svfiprintf_r>
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	b01c      	add	sp, #112	; 0x70
 8008218:	f85d eb04 	ldr.w	lr, [sp], #4
 800821c:	b003      	add	sp, #12
 800821e:	4770      	bx	lr
 8008220:	20000180 	.word	0x20000180
 8008224:	ffff0208 	.word	0xffff0208

08008228 <strcat>:
 8008228:	b510      	push	{r4, lr}
 800822a:	4602      	mov	r2, r0
 800822c:	7814      	ldrb	r4, [r2, #0]
 800822e:	4613      	mov	r3, r2
 8008230:	3201      	adds	r2, #1
 8008232:	2c00      	cmp	r4, #0
 8008234:	d1fa      	bne.n	800822c <strcat+0x4>
 8008236:	3b01      	subs	r3, #1
 8008238:	f811 2b01 	ldrb.w	r2, [r1], #1
 800823c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008240:	2a00      	cmp	r2, #0
 8008242:	d1f9      	bne.n	8008238 <strcat+0x10>
 8008244:	bd10      	pop	{r4, pc}
	...

08008248 <__malloc_lock>:
 8008248:	4801      	ldr	r0, [pc, #4]	; (8008250 <__malloc_lock+0x8>)
 800824a:	f000 baf9 	b.w	8008840 <__retarget_lock_acquire_recursive>
 800824e:	bf00      	nop
 8008250:	20001c4c 	.word	0x20001c4c

08008254 <__malloc_unlock>:
 8008254:	4801      	ldr	r0, [pc, #4]	; (800825c <__malloc_unlock+0x8>)
 8008256:	f000 baf4 	b.w	8008842 <__retarget_lock_release_recursive>
 800825a:	bf00      	nop
 800825c:	20001c4c 	.word	0x20001c4c

08008260 <__ssputs_r>:
 8008260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008264:	688e      	ldr	r6, [r1, #8]
 8008266:	429e      	cmp	r6, r3
 8008268:	4682      	mov	sl, r0
 800826a:	460c      	mov	r4, r1
 800826c:	4690      	mov	r8, r2
 800826e:	461f      	mov	r7, r3
 8008270:	d838      	bhi.n	80082e4 <__ssputs_r+0x84>
 8008272:	898a      	ldrh	r2, [r1, #12]
 8008274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008278:	d032      	beq.n	80082e0 <__ssputs_r+0x80>
 800827a:	6825      	ldr	r5, [r4, #0]
 800827c:	6909      	ldr	r1, [r1, #16]
 800827e:	eba5 0901 	sub.w	r9, r5, r1
 8008282:	6965      	ldr	r5, [r4, #20]
 8008284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008288:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800828c:	3301      	adds	r3, #1
 800828e:	444b      	add	r3, r9
 8008290:	106d      	asrs	r5, r5, #1
 8008292:	429d      	cmp	r5, r3
 8008294:	bf38      	it	cc
 8008296:	461d      	movcc	r5, r3
 8008298:	0553      	lsls	r3, r2, #21
 800829a:	d531      	bpl.n	8008300 <__ssputs_r+0xa0>
 800829c:	4629      	mov	r1, r5
 800829e:	f7ff ff39 	bl	8008114 <_malloc_r>
 80082a2:	4606      	mov	r6, r0
 80082a4:	b950      	cbnz	r0, 80082bc <__ssputs_r+0x5c>
 80082a6:	230c      	movs	r3, #12
 80082a8:	f8ca 3000 	str.w	r3, [sl]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082bc:	6921      	ldr	r1, [r4, #16]
 80082be:	464a      	mov	r2, r9
 80082c0:	f000 fac0 	bl	8008844 <memcpy>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	6126      	str	r6, [r4, #16]
 80082d2:	6165      	str	r5, [r4, #20]
 80082d4:	444e      	add	r6, r9
 80082d6:	eba5 0509 	sub.w	r5, r5, r9
 80082da:	6026      	str	r6, [r4, #0]
 80082dc:	60a5      	str	r5, [r4, #8]
 80082de:	463e      	mov	r6, r7
 80082e0:	42be      	cmp	r6, r7
 80082e2:	d900      	bls.n	80082e6 <__ssputs_r+0x86>
 80082e4:	463e      	mov	r6, r7
 80082e6:	4632      	mov	r2, r6
 80082e8:	6820      	ldr	r0, [r4, #0]
 80082ea:	4641      	mov	r1, r8
 80082ec:	f000 fab8 	bl	8008860 <memmove>
 80082f0:	68a3      	ldr	r3, [r4, #8]
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	1b9b      	subs	r3, r3, r6
 80082f6:	4432      	add	r2, r6
 80082f8:	60a3      	str	r3, [r4, #8]
 80082fa:	6022      	str	r2, [r4, #0]
 80082fc:	2000      	movs	r0, #0
 80082fe:	e7db      	b.n	80082b8 <__ssputs_r+0x58>
 8008300:	462a      	mov	r2, r5
 8008302:	f000 fac7 	bl	8008894 <_realloc_r>
 8008306:	4606      	mov	r6, r0
 8008308:	2800      	cmp	r0, #0
 800830a:	d1e1      	bne.n	80082d0 <__ssputs_r+0x70>
 800830c:	6921      	ldr	r1, [r4, #16]
 800830e:	4650      	mov	r0, sl
 8008310:	f7ff feb0 	bl	8008074 <_free_r>
 8008314:	e7c7      	b.n	80082a6 <__ssputs_r+0x46>
	...

08008318 <_svfiprintf_r>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	4698      	mov	r8, r3
 800831e:	898b      	ldrh	r3, [r1, #12]
 8008320:	061b      	lsls	r3, r3, #24
 8008322:	b09d      	sub	sp, #116	; 0x74
 8008324:	4607      	mov	r7, r0
 8008326:	460d      	mov	r5, r1
 8008328:	4614      	mov	r4, r2
 800832a:	d50e      	bpl.n	800834a <_svfiprintf_r+0x32>
 800832c:	690b      	ldr	r3, [r1, #16]
 800832e:	b963      	cbnz	r3, 800834a <_svfiprintf_r+0x32>
 8008330:	2140      	movs	r1, #64	; 0x40
 8008332:	f7ff feef 	bl	8008114 <_malloc_r>
 8008336:	6028      	str	r0, [r5, #0]
 8008338:	6128      	str	r0, [r5, #16]
 800833a:	b920      	cbnz	r0, 8008346 <_svfiprintf_r+0x2e>
 800833c:	230c      	movs	r3, #12
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	e0d1      	b.n	80084ea <_svfiprintf_r+0x1d2>
 8008346:	2340      	movs	r3, #64	; 0x40
 8008348:	616b      	str	r3, [r5, #20]
 800834a:	2300      	movs	r3, #0
 800834c:	9309      	str	r3, [sp, #36]	; 0x24
 800834e:	2320      	movs	r3, #32
 8008350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008354:	f8cd 800c 	str.w	r8, [sp, #12]
 8008358:	2330      	movs	r3, #48	; 0x30
 800835a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008504 <_svfiprintf_r+0x1ec>
 800835e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008362:	f04f 0901 	mov.w	r9, #1
 8008366:	4623      	mov	r3, r4
 8008368:	469a      	mov	sl, r3
 800836a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836e:	b10a      	cbz	r2, 8008374 <_svfiprintf_r+0x5c>
 8008370:	2a25      	cmp	r2, #37	; 0x25
 8008372:	d1f9      	bne.n	8008368 <_svfiprintf_r+0x50>
 8008374:	ebba 0b04 	subs.w	fp, sl, r4
 8008378:	d00b      	beq.n	8008392 <_svfiprintf_r+0x7a>
 800837a:	465b      	mov	r3, fp
 800837c:	4622      	mov	r2, r4
 800837e:	4629      	mov	r1, r5
 8008380:	4638      	mov	r0, r7
 8008382:	f7ff ff6d 	bl	8008260 <__ssputs_r>
 8008386:	3001      	adds	r0, #1
 8008388:	f000 80aa 	beq.w	80084e0 <_svfiprintf_r+0x1c8>
 800838c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800838e:	445a      	add	r2, fp
 8008390:	9209      	str	r2, [sp, #36]	; 0x24
 8008392:	f89a 3000 	ldrb.w	r3, [sl]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80a2 	beq.w	80084e0 <_svfiprintf_r+0x1c8>
 800839c:	2300      	movs	r3, #0
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a6:	f10a 0a01 	add.w	sl, sl, #1
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	9307      	str	r3, [sp, #28]
 80083ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083b2:	931a      	str	r3, [sp, #104]	; 0x68
 80083b4:	4654      	mov	r4, sl
 80083b6:	2205      	movs	r2, #5
 80083b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083bc:	4851      	ldr	r0, [pc, #324]	; (8008504 <_svfiprintf_r+0x1ec>)
 80083be:	f7f7 ff1f 	bl	8000200 <memchr>
 80083c2:	9a04      	ldr	r2, [sp, #16]
 80083c4:	b9d8      	cbnz	r0, 80083fe <_svfiprintf_r+0xe6>
 80083c6:	06d0      	lsls	r0, r2, #27
 80083c8:	bf44      	itt	mi
 80083ca:	2320      	movmi	r3, #32
 80083cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d0:	0711      	lsls	r1, r2, #28
 80083d2:	bf44      	itt	mi
 80083d4:	232b      	movmi	r3, #43	; 0x2b
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083da:	f89a 3000 	ldrb.w	r3, [sl]
 80083de:	2b2a      	cmp	r3, #42	; 0x2a
 80083e0:	d015      	beq.n	800840e <_svfiprintf_r+0xf6>
 80083e2:	9a07      	ldr	r2, [sp, #28]
 80083e4:	4654      	mov	r4, sl
 80083e6:	2000      	movs	r0, #0
 80083e8:	f04f 0c0a 	mov.w	ip, #10
 80083ec:	4621      	mov	r1, r4
 80083ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f2:	3b30      	subs	r3, #48	; 0x30
 80083f4:	2b09      	cmp	r3, #9
 80083f6:	d94e      	bls.n	8008496 <_svfiprintf_r+0x17e>
 80083f8:	b1b0      	cbz	r0, 8008428 <_svfiprintf_r+0x110>
 80083fa:	9207      	str	r2, [sp, #28]
 80083fc:	e014      	b.n	8008428 <_svfiprintf_r+0x110>
 80083fe:	eba0 0308 	sub.w	r3, r0, r8
 8008402:	fa09 f303 	lsl.w	r3, r9, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	46a2      	mov	sl, r4
 800840c:	e7d2      	b.n	80083b4 <_svfiprintf_r+0x9c>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	1d19      	adds	r1, r3, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	9103      	str	r1, [sp, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfbb      	ittet	lt
 800841a:	425b      	neglt	r3, r3
 800841c:	f042 0202 	orrlt.w	r2, r2, #2
 8008420:	9307      	strge	r3, [sp, #28]
 8008422:	9307      	strlt	r3, [sp, #28]
 8008424:	bfb8      	it	lt
 8008426:	9204      	strlt	r2, [sp, #16]
 8008428:	7823      	ldrb	r3, [r4, #0]
 800842a:	2b2e      	cmp	r3, #46	; 0x2e
 800842c:	d10c      	bne.n	8008448 <_svfiprintf_r+0x130>
 800842e:	7863      	ldrb	r3, [r4, #1]
 8008430:	2b2a      	cmp	r3, #42	; 0x2a
 8008432:	d135      	bne.n	80084a0 <_svfiprintf_r+0x188>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	9203      	str	r2, [sp, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfb8      	it	lt
 8008440:	f04f 33ff 	movlt.w	r3, #4294967295
 8008444:	3402      	adds	r4, #2
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008514 <_svfiprintf_r+0x1fc>
 800844c:	7821      	ldrb	r1, [r4, #0]
 800844e:	2203      	movs	r2, #3
 8008450:	4650      	mov	r0, sl
 8008452:	f7f7 fed5 	bl	8000200 <memchr>
 8008456:	b140      	cbz	r0, 800846a <_svfiprintf_r+0x152>
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	eba0 000a 	sub.w	r0, r0, sl
 800845e:	fa03 f000 	lsl.w	r0, r3, r0
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	4303      	orrs	r3, r0
 8008466:	3401      	adds	r4, #1
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846e:	4826      	ldr	r0, [pc, #152]	; (8008508 <_svfiprintf_r+0x1f0>)
 8008470:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008474:	2206      	movs	r2, #6
 8008476:	f7f7 fec3 	bl	8000200 <memchr>
 800847a:	2800      	cmp	r0, #0
 800847c:	d038      	beq.n	80084f0 <_svfiprintf_r+0x1d8>
 800847e:	4b23      	ldr	r3, [pc, #140]	; (800850c <_svfiprintf_r+0x1f4>)
 8008480:	bb1b      	cbnz	r3, 80084ca <_svfiprintf_r+0x1b2>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	3307      	adds	r3, #7
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	3308      	adds	r3, #8
 800848c:	9303      	str	r3, [sp, #12]
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	4433      	add	r3, r6
 8008492:	9309      	str	r3, [sp, #36]	; 0x24
 8008494:	e767      	b.n	8008366 <_svfiprintf_r+0x4e>
 8008496:	fb0c 3202 	mla	r2, ip, r2, r3
 800849a:	460c      	mov	r4, r1
 800849c:	2001      	movs	r0, #1
 800849e:	e7a5      	b.n	80083ec <_svfiprintf_r+0xd4>
 80084a0:	2300      	movs	r3, #0
 80084a2:	3401      	adds	r4, #1
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	4619      	mov	r1, r3
 80084a8:	f04f 0c0a 	mov.w	ip, #10
 80084ac:	4620      	mov	r0, r4
 80084ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b2:	3a30      	subs	r2, #48	; 0x30
 80084b4:	2a09      	cmp	r2, #9
 80084b6:	d903      	bls.n	80084c0 <_svfiprintf_r+0x1a8>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0c5      	beq.n	8008448 <_svfiprintf_r+0x130>
 80084bc:	9105      	str	r1, [sp, #20]
 80084be:	e7c3      	b.n	8008448 <_svfiprintf_r+0x130>
 80084c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084c4:	4604      	mov	r4, r0
 80084c6:	2301      	movs	r3, #1
 80084c8:	e7f0      	b.n	80084ac <_svfiprintf_r+0x194>
 80084ca:	ab03      	add	r3, sp, #12
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	462a      	mov	r2, r5
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <_svfiprintf_r+0x1f8>)
 80084d2:	a904      	add	r1, sp, #16
 80084d4:	4638      	mov	r0, r7
 80084d6:	f3af 8000 	nop.w
 80084da:	1c42      	adds	r2, r0, #1
 80084dc:	4606      	mov	r6, r0
 80084de:	d1d6      	bne.n	800848e <_svfiprintf_r+0x176>
 80084e0:	89ab      	ldrh	r3, [r5, #12]
 80084e2:	065b      	lsls	r3, r3, #25
 80084e4:	f53f af2c 	bmi.w	8008340 <_svfiprintf_r+0x28>
 80084e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ea:	b01d      	add	sp, #116	; 0x74
 80084ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f0:	ab03      	add	r3, sp, #12
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	462a      	mov	r2, r5
 80084f6:	4b06      	ldr	r3, [pc, #24]	; (8008510 <_svfiprintf_r+0x1f8>)
 80084f8:	a904      	add	r1, sp, #16
 80084fa:	4638      	mov	r0, r7
 80084fc:	f000 f87a 	bl	80085f4 <_printf_i>
 8008500:	e7eb      	b.n	80084da <_svfiprintf_r+0x1c2>
 8008502:	bf00      	nop
 8008504:	08008acc 	.word	0x08008acc
 8008508:	08008ad6 	.word	0x08008ad6
 800850c:	00000000 	.word	0x00000000
 8008510:	08008261 	.word	0x08008261
 8008514:	08008ad2 	.word	0x08008ad2

08008518 <_printf_common>:
 8008518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	4616      	mov	r6, r2
 800851e:	4699      	mov	r9, r3
 8008520:	688a      	ldr	r2, [r1, #8]
 8008522:	690b      	ldr	r3, [r1, #16]
 8008524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008528:	4293      	cmp	r3, r2
 800852a:	bfb8      	it	lt
 800852c:	4613      	movlt	r3, r2
 800852e:	6033      	str	r3, [r6, #0]
 8008530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008534:	4607      	mov	r7, r0
 8008536:	460c      	mov	r4, r1
 8008538:	b10a      	cbz	r2, 800853e <_printf_common+0x26>
 800853a:	3301      	adds	r3, #1
 800853c:	6033      	str	r3, [r6, #0]
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	0699      	lsls	r1, r3, #26
 8008542:	bf42      	ittt	mi
 8008544:	6833      	ldrmi	r3, [r6, #0]
 8008546:	3302      	addmi	r3, #2
 8008548:	6033      	strmi	r3, [r6, #0]
 800854a:	6825      	ldr	r5, [r4, #0]
 800854c:	f015 0506 	ands.w	r5, r5, #6
 8008550:	d106      	bne.n	8008560 <_printf_common+0x48>
 8008552:	f104 0a19 	add.w	sl, r4, #25
 8008556:	68e3      	ldr	r3, [r4, #12]
 8008558:	6832      	ldr	r2, [r6, #0]
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	42ab      	cmp	r3, r5
 800855e:	dc26      	bgt.n	80085ae <_printf_common+0x96>
 8008560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008564:	1e13      	subs	r3, r2, #0
 8008566:	6822      	ldr	r2, [r4, #0]
 8008568:	bf18      	it	ne
 800856a:	2301      	movne	r3, #1
 800856c:	0692      	lsls	r2, r2, #26
 800856e:	d42b      	bmi.n	80085c8 <_printf_common+0xb0>
 8008570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008574:	4649      	mov	r1, r9
 8008576:	4638      	mov	r0, r7
 8008578:	47c0      	blx	r8
 800857a:	3001      	adds	r0, #1
 800857c:	d01e      	beq.n	80085bc <_printf_common+0xa4>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	68e5      	ldr	r5, [r4, #12]
 8008582:	6832      	ldr	r2, [r6, #0]
 8008584:	f003 0306 	and.w	r3, r3, #6
 8008588:	2b04      	cmp	r3, #4
 800858a:	bf08      	it	eq
 800858c:	1aad      	subeq	r5, r5, r2
 800858e:	68a3      	ldr	r3, [r4, #8]
 8008590:	6922      	ldr	r2, [r4, #16]
 8008592:	bf0c      	ite	eq
 8008594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008598:	2500      	movne	r5, #0
 800859a:	4293      	cmp	r3, r2
 800859c:	bfc4      	itt	gt
 800859e:	1a9b      	subgt	r3, r3, r2
 80085a0:	18ed      	addgt	r5, r5, r3
 80085a2:	2600      	movs	r6, #0
 80085a4:	341a      	adds	r4, #26
 80085a6:	42b5      	cmp	r5, r6
 80085a8:	d11a      	bne.n	80085e0 <_printf_common+0xc8>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e008      	b.n	80085c0 <_printf_common+0xa8>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4652      	mov	r2, sl
 80085b2:	4649      	mov	r1, r9
 80085b4:	4638      	mov	r0, r7
 80085b6:	47c0      	blx	r8
 80085b8:	3001      	adds	r0, #1
 80085ba:	d103      	bne.n	80085c4 <_printf_common+0xac>
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c4:	3501      	adds	r5, #1
 80085c6:	e7c6      	b.n	8008556 <_printf_common+0x3e>
 80085c8:	18e1      	adds	r1, r4, r3
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	2030      	movs	r0, #48	; 0x30
 80085ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085d2:	4422      	add	r2, r4
 80085d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085dc:	3302      	adds	r3, #2
 80085de:	e7c7      	b.n	8008570 <_printf_common+0x58>
 80085e0:	2301      	movs	r3, #1
 80085e2:	4622      	mov	r2, r4
 80085e4:	4649      	mov	r1, r9
 80085e6:	4638      	mov	r0, r7
 80085e8:	47c0      	blx	r8
 80085ea:	3001      	adds	r0, #1
 80085ec:	d0e6      	beq.n	80085bc <_printf_common+0xa4>
 80085ee:	3601      	adds	r6, #1
 80085f0:	e7d9      	b.n	80085a6 <_printf_common+0x8e>
	...

080085f4 <_printf_i>:
 80085f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085f8:	460c      	mov	r4, r1
 80085fa:	4691      	mov	r9, r2
 80085fc:	7e27      	ldrb	r7, [r4, #24]
 80085fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008600:	2f78      	cmp	r7, #120	; 0x78
 8008602:	4680      	mov	r8, r0
 8008604:	469a      	mov	sl, r3
 8008606:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800860a:	d807      	bhi.n	800861c <_printf_i+0x28>
 800860c:	2f62      	cmp	r7, #98	; 0x62
 800860e:	d80a      	bhi.n	8008626 <_printf_i+0x32>
 8008610:	2f00      	cmp	r7, #0
 8008612:	f000 80d8 	beq.w	80087c6 <_printf_i+0x1d2>
 8008616:	2f58      	cmp	r7, #88	; 0x58
 8008618:	f000 80a3 	beq.w	8008762 <_printf_i+0x16e>
 800861c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008624:	e03a      	b.n	800869c <_printf_i+0xa8>
 8008626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800862a:	2b15      	cmp	r3, #21
 800862c:	d8f6      	bhi.n	800861c <_printf_i+0x28>
 800862e:	a001      	add	r0, pc, #4	; (adr r0, 8008634 <_printf_i+0x40>)
 8008630:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008634:	0800868d 	.word	0x0800868d
 8008638:	080086a1 	.word	0x080086a1
 800863c:	0800861d 	.word	0x0800861d
 8008640:	0800861d 	.word	0x0800861d
 8008644:	0800861d 	.word	0x0800861d
 8008648:	0800861d 	.word	0x0800861d
 800864c:	080086a1 	.word	0x080086a1
 8008650:	0800861d 	.word	0x0800861d
 8008654:	0800861d 	.word	0x0800861d
 8008658:	0800861d 	.word	0x0800861d
 800865c:	0800861d 	.word	0x0800861d
 8008660:	080087ad 	.word	0x080087ad
 8008664:	080086d1 	.word	0x080086d1
 8008668:	0800878f 	.word	0x0800878f
 800866c:	0800861d 	.word	0x0800861d
 8008670:	0800861d 	.word	0x0800861d
 8008674:	080087cf 	.word	0x080087cf
 8008678:	0800861d 	.word	0x0800861d
 800867c:	080086d1 	.word	0x080086d1
 8008680:	0800861d 	.word	0x0800861d
 8008684:	0800861d 	.word	0x0800861d
 8008688:	08008797 	.word	0x08008797
 800868c:	680b      	ldr	r3, [r1, #0]
 800868e:	1d1a      	adds	r2, r3, #4
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	600a      	str	r2, [r1, #0]
 8008694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800869c:	2301      	movs	r3, #1
 800869e:	e0a3      	b.n	80087e8 <_printf_i+0x1f4>
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	6808      	ldr	r0, [r1, #0]
 80086a4:	062e      	lsls	r6, r5, #24
 80086a6:	f100 0304 	add.w	r3, r0, #4
 80086aa:	d50a      	bpl.n	80086c2 <_printf_i+0xce>
 80086ac:	6805      	ldr	r5, [r0, #0]
 80086ae:	600b      	str	r3, [r1, #0]
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	da03      	bge.n	80086bc <_printf_i+0xc8>
 80086b4:	232d      	movs	r3, #45	; 0x2d
 80086b6:	426d      	negs	r5, r5
 80086b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086bc:	485e      	ldr	r0, [pc, #376]	; (8008838 <_printf_i+0x244>)
 80086be:	230a      	movs	r3, #10
 80086c0:	e019      	b.n	80086f6 <_printf_i+0x102>
 80086c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086c6:	6805      	ldr	r5, [r0, #0]
 80086c8:	600b      	str	r3, [r1, #0]
 80086ca:	bf18      	it	ne
 80086cc:	b22d      	sxthne	r5, r5
 80086ce:	e7ef      	b.n	80086b0 <_printf_i+0xbc>
 80086d0:	680b      	ldr	r3, [r1, #0]
 80086d2:	6825      	ldr	r5, [r4, #0]
 80086d4:	1d18      	adds	r0, r3, #4
 80086d6:	6008      	str	r0, [r1, #0]
 80086d8:	0628      	lsls	r0, r5, #24
 80086da:	d501      	bpl.n	80086e0 <_printf_i+0xec>
 80086dc:	681d      	ldr	r5, [r3, #0]
 80086de:	e002      	b.n	80086e6 <_printf_i+0xf2>
 80086e0:	0669      	lsls	r1, r5, #25
 80086e2:	d5fb      	bpl.n	80086dc <_printf_i+0xe8>
 80086e4:	881d      	ldrh	r5, [r3, #0]
 80086e6:	4854      	ldr	r0, [pc, #336]	; (8008838 <_printf_i+0x244>)
 80086e8:	2f6f      	cmp	r7, #111	; 0x6f
 80086ea:	bf0c      	ite	eq
 80086ec:	2308      	moveq	r3, #8
 80086ee:	230a      	movne	r3, #10
 80086f0:	2100      	movs	r1, #0
 80086f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086f6:	6866      	ldr	r6, [r4, #4]
 80086f8:	60a6      	str	r6, [r4, #8]
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	bfa2      	ittt	ge
 80086fe:	6821      	ldrge	r1, [r4, #0]
 8008700:	f021 0104 	bicge.w	r1, r1, #4
 8008704:	6021      	strge	r1, [r4, #0]
 8008706:	b90d      	cbnz	r5, 800870c <_printf_i+0x118>
 8008708:	2e00      	cmp	r6, #0
 800870a:	d04d      	beq.n	80087a8 <_printf_i+0x1b4>
 800870c:	4616      	mov	r6, r2
 800870e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008712:	fb03 5711 	mls	r7, r3, r1, r5
 8008716:	5dc7      	ldrb	r7, [r0, r7]
 8008718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800871c:	462f      	mov	r7, r5
 800871e:	42bb      	cmp	r3, r7
 8008720:	460d      	mov	r5, r1
 8008722:	d9f4      	bls.n	800870e <_printf_i+0x11a>
 8008724:	2b08      	cmp	r3, #8
 8008726:	d10b      	bne.n	8008740 <_printf_i+0x14c>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	07df      	lsls	r7, r3, #31
 800872c:	d508      	bpl.n	8008740 <_printf_i+0x14c>
 800872e:	6923      	ldr	r3, [r4, #16]
 8008730:	6861      	ldr	r1, [r4, #4]
 8008732:	4299      	cmp	r1, r3
 8008734:	bfde      	ittt	le
 8008736:	2330      	movle	r3, #48	; 0x30
 8008738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800873c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008740:	1b92      	subs	r2, r2, r6
 8008742:	6122      	str	r2, [r4, #16]
 8008744:	f8cd a000 	str.w	sl, [sp]
 8008748:	464b      	mov	r3, r9
 800874a:	aa03      	add	r2, sp, #12
 800874c:	4621      	mov	r1, r4
 800874e:	4640      	mov	r0, r8
 8008750:	f7ff fee2 	bl	8008518 <_printf_common>
 8008754:	3001      	adds	r0, #1
 8008756:	d14c      	bne.n	80087f2 <_printf_i+0x1fe>
 8008758:	f04f 30ff 	mov.w	r0, #4294967295
 800875c:	b004      	add	sp, #16
 800875e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008762:	4835      	ldr	r0, [pc, #212]	; (8008838 <_printf_i+0x244>)
 8008764:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	680e      	ldr	r6, [r1, #0]
 800876c:	061f      	lsls	r7, r3, #24
 800876e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008772:	600e      	str	r6, [r1, #0]
 8008774:	d514      	bpl.n	80087a0 <_printf_i+0x1ac>
 8008776:	07d9      	lsls	r1, r3, #31
 8008778:	bf44      	itt	mi
 800877a:	f043 0320 	orrmi.w	r3, r3, #32
 800877e:	6023      	strmi	r3, [r4, #0]
 8008780:	b91d      	cbnz	r5, 800878a <_printf_i+0x196>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	f023 0320 	bic.w	r3, r3, #32
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	2310      	movs	r3, #16
 800878c:	e7b0      	b.n	80086f0 <_printf_i+0xfc>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f043 0320 	orr.w	r3, r3, #32
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	2378      	movs	r3, #120	; 0x78
 8008798:	4828      	ldr	r0, [pc, #160]	; (800883c <_printf_i+0x248>)
 800879a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800879e:	e7e3      	b.n	8008768 <_printf_i+0x174>
 80087a0:	065e      	lsls	r6, r3, #25
 80087a2:	bf48      	it	mi
 80087a4:	b2ad      	uxthmi	r5, r5
 80087a6:	e7e6      	b.n	8008776 <_printf_i+0x182>
 80087a8:	4616      	mov	r6, r2
 80087aa:	e7bb      	b.n	8008724 <_printf_i+0x130>
 80087ac:	680b      	ldr	r3, [r1, #0]
 80087ae:	6826      	ldr	r6, [r4, #0]
 80087b0:	6960      	ldr	r0, [r4, #20]
 80087b2:	1d1d      	adds	r5, r3, #4
 80087b4:	600d      	str	r5, [r1, #0]
 80087b6:	0635      	lsls	r5, r6, #24
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	d501      	bpl.n	80087c0 <_printf_i+0x1cc>
 80087bc:	6018      	str	r0, [r3, #0]
 80087be:	e002      	b.n	80087c6 <_printf_i+0x1d2>
 80087c0:	0671      	lsls	r1, r6, #25
 80087c2:	d5fb      	bpl.n	80087bc <_printf_i+0x1c8>
 80087c4:	8018      	strh	r0, [r3, #0]
 80087c6:	2300      	movs	r3, #0
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	4616      	mov	r6, r2
 80087cc:	e7ba      	b.n	8008744 <_printf_i+0x150>
 80087ce:	680b      	ldr	r3, [r1, #0]
 80087d0:	1d1a      	adds	r2, r3, #4
 80087d2:	600a      	str	r2, [r1, #0]
 80087d4:	681e      	ldr	r6, [r3, #0]
 80087d6:	6862      	ldr	r2, [r4, #4]
 80087d8:	2100      	movs	r1, #0
 80087da:	4630      	mov	r0, r6
 80087dc:	f7f7 fd10 	bl	8000200 <memchr>
 80087e0:	b108      	cbz	r0, 80087e6 <_printf_i+0x1f2>
 80087e2:	1b80      	subs	r0, r0, r6
 80087e4:	6060      	str	r0, [r4, #4]
 80087e6:	6863      	ldr	r3, [r4, #4]
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	2300      	movs	r3, #0
 80087ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f0:	e7a8      	b.n	8008744 <_printf_i+0x150>
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	4632      	mov	r2, r6
 80087f6:	4649      	mov	r1, r9
 80087f8:	4640      	mov	r0, r8
 80087fa:	47d0      	blx	sl
 80087fc:	3001      	adds	r0, #1
 80087fe:	d0ab      	beq.n	8008758 <_printf_i+0x164>
 8008800:	6823      	ldr	r3, [r4, #0]
 8008802:	079b      	lsls	r3, r3, #30
 8008804:	d413      	bmi.n	800882e <_printf_i+0x23a>
 8008806:	68e0      	ldr	r0, [r4, #12]
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	4298      	cmp	r0, r3
 800880c:	bfb8      	it	lt
 800880e:	4618      	movlt	r0, r3
 8008810:	e7a4      	b.n	800875c <_printf_i+0x168>
 8008812:	2301      	movs	r3, #1
 8008814:	4632      	mov	r2, r6
 8008816:	4649      	mov	r1, r9
 8008818:	4640      	mov	r0, r8
 800881a:	47d0      	blx	sl
 800881c:	3001      	adds	r0, #1
 800881e:	d09b      	beq.n	8008758 <_printf_i+0x164>
 8008820:	3501      	adds	r5, #1
 8008822:	68e3      	ldr	r3, [r4, #12]
 8008824:	9903      	ldr	r1, [sp, #12]
 8008826:	1a5b      	subs	r3, r3, r1
 8008828:	42ab      	cmp	r3, r5
 800882a:	dcf2      	bgt.n	8008812 <_printf_i+0x21e>
 800882c:	e7eb      	b.n	8008806 <_printf_i+0x212>
 800882e:	2500      	movs	r5, #0
 8008830:	f104 0619 	add.w	r6, r4, #25
 8008834:	e7f5      	b.n	8008822 <_printf_i+0x22e>
 8008836:	bf00      	nop
 8008838:	08008add 	.word	0x08008add
 800883c:	08008aee 	.word	0x08008aee

08008840 <__retarget_lock_acquire_recursive>:
 8008840:	4770      	bx	lr

08008842 <__retarget_lock_release_recursive>:
 8008842:	4770      	bx	lr

08008844 <memcpy>:
 8008844:	440a      	add	r2, r1
 8008846:	4291      	cmp	r1, r2
 8008848:	f100 33ff 	add.w	r3, r0, #4294967295
 800884c:	d100      	bne.n	8008850 <memcpy+0xc>
 800884e:	4770      	bx	lr
 8008850:	b510      	push	{r4, lr}
 8008852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800885a:	4291      	cmp	r1, r2
 800885c:	d1f9      	bne.n	8008852 <memcpy+0xe>
 800885e:	bd10      	pop	{r4, pc}

08008860 <memmove>:
 8008860:	4288      	cmp	r0, r1
 8008862:	b510      	push	{r4, lr}
 8008864:	eb01 0402 	add.w	r4, r1, r2
 8008868:	d902      	bls.n	8008870 <memmove+0x10>
 800886a:	4284      	cmp	r4, r0
 800886c:	4623      	mov	r3, r4
 800886e:	d807      	bhi.n	8008880 <memmove+0x20>
 8008870:	1e43      	subs	r3, r0, #1
 8008872:	42a1      	cmp	r1, r4
 8008874:	d008      	beq.n	8008888 <memmove+0x28>
 8008876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800887a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800887e:	e7f8      	b.n	8008872 <memmove+0x12>
 8008880:	4402      	add	r2, r0
 8008882:	4601      	mov	r1, r0
 8008884:	428a      	cmp	r2, r1
 8008886:	d100      	bne.n	800888a <memmove+0x2a>
 8008888:	bd10      	pop	{r4, pc}
 800888a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800888e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008892:	e7f7      	b.n	8008884 <memmove+0x24>

08008894 <_realloc_r>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	4607      	mov	r7, r0
 8008898:	4614      	mov	r4, r2
 800889a:	460e      	mov	r6, r1
 800889c:	b921      	cbnz	r1, 80088a8 <_realloc_r+0x14>
 800889e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088a2:	4611      	mov	r1, r2
 80088a4:	f7ff bc36 	b.w	8008114 <_malloc_r>
 80088a8:	b922      	cbnz	r2, 80088b4 <_realloc_r+0x20>
 80088aa:	f7ff fbe3 	bl	8008074 <_free_r>
 80088ae:	4625      	mov	r5, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b4:	f000 f814 	bl	80088e0 <_malloc_usable_size_r>
 80088b8:	42a0      	cmp	r0, r4
 80088ba:	d20f      	bcs.n	80088dc <_realloc_r+0x48>
 80088bc:	4621      	mov	r1, r4
 80088be:	4638      	mov	r0, r7
 80088c0:	f7ff fc28 	bl	8008114 <_malloc_r>
 80088c4:	4605      	mov	r5, r0
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d0f2      	beq.n	80088b0 <_realloc_r+0x1c>
 80088ca:	4631      	mov	r1, r6
 80088cc:	4622      	mov	r2, r4
 80088ce:	f7ff ffb9 	bl	8008844 <memcpy>
 80088d2:	4631      	mov	r1, r6
 80088d4:	4638      	mov	r0, r7
 80088d6:	f7ff fbcd 	bl	8008074 <_free_r>
 80088da:	e7e9      	b.n	80088b0 <_realloc_r+0x1c>
 80088dc:	4635      	mov	r5, r6
 80088de:	e7e7      	b.n	80088b0 <_realloc_r+0x1c>

080088e0 <_malloc_usable_size_r>:
 80088e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e4:	1f18      	subs	r0, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bfbc      	itt	lt
 80088ea:	580b      	ldrlt	r3, [r1, r0]
 80088ec:	18c0      	addlt	r0, r0, r3
 80088ee:	4770      	bx	lr

080088f0 <_init>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	bf00      	nop
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr

080088fc <_fini>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	bf00      	nop
 8008900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008902:	bc08      	pop	{r3}
 8008904:	469e      	mov	lr, r3
 8008906:	4770      	bx	lr
